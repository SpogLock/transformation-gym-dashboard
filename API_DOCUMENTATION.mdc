# POS Dashboard Backend API Documentation

## Base URL
```
http://127.0.0.1:8000/api
```

## Authentication
All protected endpoints require a Bearer token in the Authorization header:
```
Authorization: Bearer {your_token_here}
```

## Response Format
All API responses follow this consistent format:

### Success Response
```json
{
  "success": true,
  "message": "Operation successful",
  "data": {
    // Response data here
  }
}
```

### Error Response
```json
{
  "success": false,
  "message": "Error description",
  "errors": {
    // Validation errors (if any)
  }
}
```

---

## Authentication Endpoints

### 1. Register User
**POST** `/register`

Creates a new user account.

#### Request Body
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123",
  "password_confirmation": "password123",
  "role": "staff" // Optional: "admin" or "staff" (defaults to "staff")
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "User registered successfully",
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "created_at": "2025-01-15T10:30:00.000000Z"
    },
    "token": "1|abcdef123456...",
    "token_type": "Bearer"
  }
}
```

#### Frontend Integration Example
```javascript
const registerUser = async (userData) => {
  const response = await fetch('http://127.0.0.1:8000/api/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(userData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Store token in localStorage or state management
    localStorage.setItem('auth_token', data.data.token);
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 2. Login User
**POST** `/login`

Authenticates a user and returns an access token.

#### Request Body
```json
{
  "email": "john@example.com",
  "password": "password123",
  "remember_me": true // Optional: extends token expiration to 30 days
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "last_login": "2025-01-15T10:30:00.000000Z"
    },
    "token": "1|abcdef123456...",
    "token_type": "Bearer",
    "expires_in": 2592000 // Token expiration in seconds (30 days if remember_me=true, 1 day otherwise)
  }
}
```

#### Frontend Integration Example
```javascript
const loginUser = async (credentials) => {
  const response = await fetch('http://127.0.0.1:8000/api/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(credentials)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Store token and user data
    localStorage.setItem('auth_token', data.data.token);
    localStorage.setItem('user', JSON.stringify(data.data.user));
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 3. Logout User
**POST** `/logout`

Invalidates the current access token.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Logout successful"
}
```

#### Frontend Integration Example
```javascript
const logoutUser = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/logout', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Clear stored authentication data
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user');
  }
  
  return data;
};
```

---

### 4. Get User Profile
**GET** `/profile`

Retrieves the authenticated user's profile information.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "created_at": "2025-01-15T10:30:00.000000Z",
      "updated_at": "2025-01-15T10:30:00.000000Z"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getUserProfile = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/profile', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 5. Update User Profile
**PUT** `/profile`

Updates the authenticated user's profile information.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "John Smith", // Optional
  "email": "johnsmith@example.com", // Optional
  "remember_me": false // Optional
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile updated successfully",
  "data": {
    "user": {
      "id": 1,
      "name": "John Smith",
      "email": "johnsmith@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": false,
      "updated_at": "2025-01-15T11:00:00.000000Z"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const updateUserProfile = async (profileData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/profile', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(profileData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Update stored user data
    localStorage.setItem('user', JSON.stringify(data.data.user));
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 6. Change Password
**POST** `/change-password`

Changes the authenticated user's password.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "current_password": "oldpassword123",
  "password": "newpassword123",
  "password_confirmation": "newpassword123"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Password changed successfully"
}
```

#### Frontend Integration Example
```javascript
const changePassword = async (passwordData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/change-password', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(passwordData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Dashboard Endpoints

### 7. Test Authentication
**GET** `/user`

Test endpoint to verify authentication is working.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "created_at": "2025-01-15T10:30:00.000000Z",
      "updated_at": "2025-01-15T10:30:00.000000Z"
    },
    "message": "You are authenticated!"
  }
}
```

---

### 8. POS Dashboard
**GET** `/dashboard`

Access the main POS dashboard (requires staff or admin role).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "message": "Welcome to POS dashboard!",
    "user": {
      // User object here
    }
  }
}
```

---

### 9. Admin Dashboard
**GET** `/admin/dashboard`

Access the admin dashboard (requires admin role only).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "message": "Welcome to admin dashboard!",
    "user": {
      // User object here
    }
  }
}
```

---

## Error Handling

### Common HTTP Status Codes
- `200 OK` - Request successful
- `201 Created` - Resource created successfully
- `400 Bad Request` - Invalid request data
- `401 Unauthorized` - Authentication required or invalid credentials
- `403 Forbidden` - Insufficient permissions (role-based access)
- `422 Unprocessable Entity` - Validation errors
- `500 Internal Server Error` - Server error

### Authentication Errors
```json
{
  "success": false,
  "message": "Invalid credentials"
}
```

### Validation Errors
```json
{
  "success": false,
  "message": "Validation failed",
  "errors": {
    "email": ["The email field is required."],
    "password": ["The password field is required."]
  }
}
```

### Authorization Errors
```json
{
  "success": false,
  "message": "Access denied. Admin role required."
}
```

---

## Frontend Integration Tips

### 1. Token Management
```javascript
// Store token after login/register
localStorage.setItem('auth_token', token);

// Include token in requests
const token = localStorage.getItem('auth_token');
headers: {
  'Authorization': `Bearer ${token}`,
  'Content-Type': 'application/json',
  'Accept': 'application/json'
}
```

### 2. Role-Based UI
```javascript
// Check user role for conditional rendering
const user = JSON.parse(localStorage.getItem('user'));
const isAdmin = user?.role === 'admin';
const isStaff = user?.role === 'staff';

// Show admin-only features
{isAdmin && <AdminPanel />}

// Show staff/admin features
{(isStaff || isAdmin) && <POSInterface />}
```

### 3. Remember Me Feature
```javascript
// When logging in, pass remember_me preference
const loginData = {
  email: 'user@example.com',
  password: 'password123',
  remember_me: rememberMeCheckbox.checked // true = 30 days, false = 1 day
};
```

### 4. Error Handling
```javascript
const handleApiCall = async (apiFunction) => {
  try {
    const result = await apiFunction();
    return result;
  } catch (error) {
    if (error.message.includes('Invalid credentials')) {
      // Redirect to login
      redirectToLogin();
    } else if (error.message.includes('Access denied')) {
      // Show permission denied message
      showPermissionDenied();
    } else {
      // Show generic error
      showError(error.message);
    }
  }
};
```

### 5. Auto-logout on Token Expiry
```javascript
// Check token expiry and auto-logout
const checkTokenExpiry = () => {
  const token = localStorage.getItem('auth_token');
  if (!token) return;
  
  // You can decode the JWT token to check expiry
  // Or make a test API call to see if token is still valid
  fetch('http://127.0.0.1:8000/api/user', {
    headers: { 'Authorization': `Bearer ${token}` }
  })
  .then(response => {
    if (!response.ok) {
      // Token expired, logout user
      logoutUser();
    }
  });
};

// Check token validity periodically
setInterval(checkTokenExpiry, 60000); // Check every minute
```

---

## User Roles

### Admin Role
- Full access to all features
- Can access `/admin/dashboard`
- Can create other admin users
- Full CRUD operations on all resources

### Staff Role
- Access to POS operations
- Can access `/dashboard`
- Limited access to certain features
- Cannot access admin-only endpoints

---

## Customer Management Endpoints

### 10. Get All Customers
**GET** `/customers`

Retrieves a paginated list of customers with filtering and sorting options.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `status` (optional): Filter by status (`active`, `inactive`, `suspended`)
- `type` (optional): Filter by type (`new`, `old`)
- `plan` (optional): Filter by plan (`basic`, `standard`, `premium`)
- `subscription_status` (optional): Filter by subscription status (`active`, `overdue`, `paid`, `inactive`)
- `has_trainer` (optional): Filter by trainer assignment (`true`, `false`)
- `search` (optional): Search by name, email, or mobile number
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "Asim Khan",
        "email": "asim@gmail.com",
        "mobile_number": "+92 321 2345678",
        "address": "House no. 123, Street no. 123, Lahore",
        "profile_picture_url": null,
        "type": "new",
        "type_display": "New",
        "status": "active",
        "status_display": "Active",
        "member_type": "new",
        "member_type_display": "New",
        "plan": "premium",
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "subscription_status": "overdue",
        "subscription_status_display": "Overdue",
        "last_payment_date": "2024-01-15",
        "next_due_date": "2024-02-15",
        "overdue_days": 608,
        "overdue_days_text": "OVERDUE 608 days",
        "has_trainer": true,
        "trainer_name": "Ahmed Ali",
        "trainer_display": "Yes (Ahmed Ali)",
        "age": 28,
        "weight": "75.00",
        "fitness_goals": "Weight Loss",
        "emergency_contact_phone": "+92 300 1234567",
        "emergency_contact_name": null,
        "total_spent": "7650.00",
        "total_orders": 4,
        "total_items_purchased": 7,
        "last_purchase_date": "2024-02-15",
        "notes": null,
        "created_at": "2025-01-15T10:30:00.000000Z",
        "updated_at": "2025-01-15T10:30:00.000000Z"
      }
    ],
    "pagination": {
      "current_page": 1,
      "last_page": 1,
      "per_page": 15,
      "total": 1,
      "from": 1,
      "to": 1
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomers = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage examples:
// getCustomers({ status: 'active', plan: 'premium' })
// getCustomers({ search: 'asim', sort_by: 'name', sort_order: 'asc' })
// getCustomers({ has_trainer: true, per_page: 20 })
```

---

### 11. Create Customer
**POST** `/customers`

Creates a new customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "Asim Khan",
  "email": "asim@gmail.com",
  "mobile_number": "+92 321 2345678",
  "address": "House no. 123, Street no. 123, Lahore",
  "profile_picture_url": "https://example.com/profile.jpg",
  "type": "new",
  "status": "active",
  "member_type": "new",
  "plan": "premium",
  "monthly_fee": 4500.00,
  "subscription_status": "active",
  "last_payment_date": "2024-01-15",
  "next_due_date": "2024-02-15",
  "overdue_days": 0,
  "has_trainer": true,
  "trainer_name": "Ahmed Ali",
  "trainer_id": 1,
  "age": 28,
  "weight": 75.5,
  "fitness_goals": "Weight Loss",
  "emergency_contact_phone": "+92 300 1234567",
  "emergency_contact_name": "Fatima Khan",
  "notes": "Regular customer, prefers morning sessions"
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Customer created successfully",
  "data": {
    "customer": {
      // Customer object with all fields
    }
  }
}
```

#### Frontend Integration Example
```javascript
const createCustomer = async (customerData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/customers', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(customerData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 12. Get Customer Details
**GET** `/customers/{id}`

Retrieves detailed information about a specific customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      // Complete customer object with all fields
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomer = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 13. Update Customer
**PUT** `/customers/{id}`

Updates an existing customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "Asim Khan Updated",
  "weight": 74.5,
  "fitness_goals": "Muscle Building",
  "monthly_fee": 5000.00
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer updated successfully",
  "data": {
    "customer": {
      // Updated customer object
    }
  }
}
```

#### Frontend Integration Example
```javascript
const updateCustomer = async (customerId, updateData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(updateData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 14. Delete Customer
**DELETE** `/customers/{id}`

Deletes a customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer deleted successfully"
}
```

#### Frontend Integration Example
```javascript
const deleteCustomer = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 15. Get Customer Statistics
**GET** `/customers-statistics`

Retrieves aggregated statistics about customers.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_customers": 150,
      "active_customers": 120,
      "new_customers": 45,
      "overdue_customers": 25,
      "customers_with_trainers": 80,
      "premium_customers": 60,
      "total_revenue": "675000.00",
      "average_monthly_fee": "4500.00"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomerStatistics = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/customers-statistics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.statistics;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 16. Mark Customer as Paid
**POST** `/customers/{id}/mark-as-paid`

Marks a customer's subscription as paid and updates payment dates.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer marked as paid successfully",
  "data": {
    "customer": {
      // Updated customer object with new payment status
    }
  }
}
```

#### Frontend Integration Example
```javascript
const markCustomerAsPaid = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/mark-as-paid`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 17. Send Payment Reminder
**POST** `/customers/{id}/send-reminder`

Sends a payment reminder to the customer and updates overdue status.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Payment reminder sent successfully",
  "data": {
    "customer": {
      // Updated customer object with new overdue status
    }
  }
}
```

#### Frontend Integration Example
```javascript
const sendPaymentReminder = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/send-reminder`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Customer Management Frontend Integration Tips

### 1. Customer List Component
```javascript
const CustomerList = () => {
  const [customers, setCustomers] = useState([]);
  const [filters, setFilters] = useState({});
  const [pagination, setPagination] = useState({});

  const loadCustomers = async () => {
    try {
      const data = await getCustomers(filters);
      setCustomers(data.customers);
      setPagination(data.pagination);
    } catch (error) {
      console.error('Error loading customers:', error);
    }
  };

  useEffect(() => {
    loadCustomers();
  }, [filters]);

  return (
    <div>
      {/* Filter controls */}
      <FilterControls filters={filters} onFiltersChange={setFilters} />
      
      {/* Customer table */}
      <CustomerTable customers={customers} onRefresh={loadCustomers} />
      
      {/* Pagination */}
      <Pagination pagination={pagination} onPageChange={loadCustomers} />
    </div>
  );
};
```

### 2. Customer Profile Component
```javascript
const CustomerProfile = ({ customerId }) => {
  const [customer, setCustomer] = useState(null);

  const loadCustomer = async () => {
    try {
      const customerData = await getCustomer(customerId);
      setCustomer(customerData);
    } catch (error) {
      console.error('Error loading customer:', error);
    }
  };

  useEffect(() => {
    loadCustomer();
  }, [customerId]);

  if (!customer) return <div>Loading...</div>;

  return (
    <div>
      {/* Customer header with photo, name, email */}
      <CustomerHeader customer={customer} />
      
      {/* Key metrics cards */}
      <CustomerMetrics customer={customer} />
      
      {/* Contact and membership details */}
      <CustomerDetails customer={customer} />
    </div>
  );
};
```

### 3. Payment Management
```javascript
const PaymentActions = ({ customer }) => {
  const handleMarkAsPaid = async () => {
    try {
      await markCustomerAsPaid(customer.id);
      // Refresh customer data or update local state
      window.location.reload();
    } catch (error) {
      console.error('Error marking as paid:', error);
    }
  };

  const handleSendReminder = async () => {
    try {
      await sendPaymentReminder(customer.id);
      // Refresh customer data or update local state
      window.location.reload();
    } catch (error) {
      console.error('Error sending reminder:', error);
    }
  };

  return (
    <div>
      <button onClick={handleMarkAsPaid}>Mark as Paid</button>
      <button onClick={handleSendReminder}>Send Reminder</button>
    </div>
  );
};
```

---

---

## Customer Profile Picture Management Endpoints

### 18. Upload Customer Profile Picture
**POST** `/customers/{id}/upload-profile-picture`

Uploads a profile picture for a customer.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: multipart/form-data
```

#### Request Body (Form Data)
- `profile_picture` (file, required): Image file (jpeg, png, jpg, gif, webp, max 2MB)

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile picture uploaded successfully",
  "data": {
    "customer": {
      // Updated customer object with new profile_picture_url
    },
    "profile_picture_url": "http://127.0.0.1:8000/storage/customers/profile-pictures/customer_1_1642123456_abc123def4.jpg"
  }
}
```

#### Frontend Integration Example
```javascript
const uploadCustomerProfilePicture = async (customerId, imageFile) => {
  const token = localStorage.getItem('auth_token');
  
  const formData = new FormData();
  formData.append('profile_picture', imageFile);
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/upload-profile-picture`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      // Don't set Content-Type header - let browser set it for FormData
    },
    body: formData
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage with file input
const handleImageUpload = async (event) => {
  const file = event.target.files[0];
  if (file) {
    try {
      const result = await uploadCustomerProfilePicture(customerId, file);
      setProfilePictureUrl(result.profile_picture_url);
    } catch (error) {
      console.error('Error uploading image:', error);
    }
  }
};
```

---

### 19. Delete Customer Profile Picture
**DELETE** `/customers/{id}/delete-profile-picture`

Deletes a customer's profile picture.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile picture deleted successfully",
  "data": {
    "customer": {
      // Updated customer object with profile_picture_url set to null
    }
  }
}
```

#### Frontend Integration Example
```javascript
const deleteCustomerProfilePicture = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/delete-profile-picture`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 20. Get Customer Profile Picture
**GET** `/customers/{id}/profile-picture`

Retrieves a customer's profile picture URL.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "profile_picture_url": "http://127.0.0.1:8000/storage/customers/profile-pictures/customer_1_1642123456_abc123def4.jpg",
    "customer_id": 1,
    "customer_name": "Asim Khan"
  }
}
```

#### Response (404 Not Found) - No Profile Picture
```json
{
  "success": false,
  "message": "No profile picture found for this customer"
}
```

#### Frontend Integration Example
```javascript
const getCustomerProfilePicture = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/profile-picture`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.profile_picture_url;
  } else {
    return null; // No profile picture
  }
};
```

---

## Image Upload Frontend Integration Tips

### 1. Image Upload Component
```javascript
const ProfilePictureUpload = ({ customerId, currentImageUrl, onImageChange }) => {
  const [uploading, setUploading] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(currentImageUrl);

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Validate file
      if (file.size > 2 * 1024 * 1024) {
        alert('File size must be less than 2MB');
        return;
      }
      
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => setPreviewUrl(e.target.result);
      reader.readAsDataURL(file);

      // Upload file
      uploadImage(file);
    }
  };

  const uploadImage = async (file) => {
    setUploading(true);
    try {
      const result = await uploadCustomerProfilePicture(customerId, file);
      onImageChange(result.profile_picture_url);
    } catch (error) {
      console.error('Upload failed:', error);
      alert('Failed to upload image');
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteCustomerProfilePicture(customerId);
      setPreviewUrl(null);
      onImageChange(null);
    } catch (error) {
      console.error('Delete failed:', error);
    }
  };

  return (
    <div className="profile-picture-upload">
      <div className="current-image">
        {previewUrl ? (
          <img src={previewUrl} alt="Profile" style={{ width: '150px', height: '150px', borderRadius: '50%', objectFit: 'cover' }} />
        ) : (
          <div className="placeholder" style={{ width: '150px', height: '150px', borderRadius: '50%', backgroundColor: '#f0f0f0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            No Image
          </div>
        )}
      </div>
      
      <div className="upload-controls">
        <input
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          disabled={uploading}
          style={{ display: 'none' }}
          id="image-upload"
        />
        <label htmlFor="image-upload" className="upload-button">
          {uploading ? 'Uploading...' : 'Upload Image'}
        </label>
        
        {previewUrl && (
          <button onClick={handleDelete} className="delete-button">
            Delete Image
          </button>
        )}
      </div>
    </div>
  );
};
```

### 2. Image Display Component
```javascript
const CustomerProfilePicture = ({ customer, size = 'medium' }) => {
  const [imageUrl, setImageUrl] = useState(customer.profile_picture_url);

  const sizeClasses = {
    small: 'w-12 h-12',
    medium: 'w-24 h-24',
    large: 'w-32 h-32'
  };

  const handleImageError = () => {
    setImageUrl(null);
  };

  return (
    <div className={`${sizeClasses[size]} rounded-full overflow-hidden bg-gray-200 flex items-center justify-center`}>
      {imageUrl ? (
        <img
          src={imageUrl}
          alt={customer.name}
          className="w-full h-full object-cover"
          onError={handleImageError}
        />
      ) : (
        <div className="text-gray-500 text-center">
          <div className="text-2xl">👤</div>
        </div>
      )}
    </div>
  );
};
```

### 3. File Validation Helper
```javascript
const validateImageFile = (file) => {
  const errors = [];
  
  // Check file size (2MB max)
  if (file.size > 2 * 1024 * 1024) {
    errors.push('File size must be less than 2MB');
  }
  
  // Check file type
  const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp'];
  if (!allowedTypes.includes(file.type)) {
    errors.push('File must be an image (JPEG, PNG, JPG, GIF, or WebP)');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};
```

---

## Image Storage Information

### Storage Location
- **Local Storage**: `storage/app/public/customers/profile-pictures/`
- **Public URL**: `http://127.0.0.1:8000/storage/customers/profile-pictures/`
- **File Naming**: `customer_{id}_{timestamp}_{random}.{extension}`

### Supported Formats
- JPEG (.jpg, .jpeg)
- PNG (.png)
- GIF (.gif)
- WebP (.webp)

### File Size Limits
- **Maximum Size**: 2MB per image
- **Validation**: Server-side validation with proper error messages

### Security Features
- File type validation (images only)
- File size limits
- Automatic old file cleanup when uploading new images
- Unique filename generation to prevent conflicts

---

## Plan Management Endpoints

All Plan endpoints require authentication and the `staff_or_admin` middleware.

### 21. Get All Plans
**GET** `/plans`

Retrieves a paginated list of plans with optional filters.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `search` (optional): Search by `name` or `description`
- `is_active` (optional): Filter by active status (`true`, `false`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 1,
        "name": "Premium",
        "description": "Full access with trainer",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "is_active": true,
        "created_at": "2025-10-17T10:30:00.000000Z",
        "updated_at": "2025-10-17T10:30:00.000000Z"
      }
    ],
    "first_page_url": "http://127.0.0.1:8000/api/plans?page=1",
    "from": 1,
    "last_page": 1,
    "last_page_url": "http://127.0.0.1:8000/api/plans?page=1",
    "links": [],
    "next_page_url": null,
    "path": "http://127.0.0.1:8000/api/plans",
    "per_page": 15,
    "prev_page_url": null,
    "to": 1,
    "total": 1
  }
}
```

---

### 22. Create Plan
**POST** `/plans`

Creates a new plan.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "name": "Standard",
  "description": "Gym floor access",
  "monthly_fee": 3000,
  "registration_fee": 1500,
  "is_active": true
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Plan created successfully",
  "data": {
    "id": 2,
    "name": "Standard",
    "description": "Gym floor access",
    "monthly_fee": "3000.00",
    "registration_fee": "1500.00",
    "is_active": true,
    "created_at": "2025-10-17T11:00:00.000000Z",
    "updated_at": "2025-10-17T11:00:00.000000Z"
  }
}
```

---

### 23. Get Plan Details
**GET** `/plans/{id}`

Retrieves details for a specific plan.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Premium",
    "description": "Full access with trainer",
    "monthly_fee": "4500.00",
    "registration_fee": "2000.00",
    "is_active": true,
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T10:30:00.000000Z"
  }
}
```

---

### 24. Update Plan
**PUT** `/plans/{id}`

Updates an existing plan (partial updates allowed; use PATCH or PUT).

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body (examples)
```json
{
  "name": "Premium Plus",
  "monthly_fee": 5000,
  "registration_fee": 2500,
  "is_active": true
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Plan updated successfully",
  "data": {
    "id": 1,
    "name": "Premium Plus",
    "description": "Full access with trainer",
    "monthly_fee": "5000.00",
    "registration_fee": "2500.00",
    "is_active": true,
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T12:00:00.000000Z"
  }
}
```

---

### 25. Delete Plan
**DELETE** `/plans/{id}`

Deletes a plan.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Plan deleted successfully"
}
```

---

### Frontend Integration Examples (Plans)

```javascript
// List plans
const getPlans = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const query = new URLSearchParams(filters);
  const res = await fetch(`http://127.0.0.1:8000/api/plans?${query}`, {
    headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data; // Laravel paginator object
};

// Create plan
const createPlan = async (payload) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch('http://127.0.0.1:8000/api/plans', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify(payload)
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data;
};

// Update plan
const updatePlan = async (id, payload) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch(`http://127.0.0.1:8000/api/plans/${id}`, {
    method: 'PUT',
    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify(payload)
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data;
};

// Delete plan
const deletePlan = async (id) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch(`http://127.0.0.1:8000/api/plans/${id}`, {
    method: 'DELETE',
    headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.message;
};
```

---

## Customer Plan Management Endpoints

These endpoints allow you to manage customer plans and view plan details.

### 26. Get Customer's Plan Details
**GET** `/customers/{id}/plan`

Retrieves the plan details for a specific customer, including registration fee.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "plan": {
      "id": 1,
      "name": "Premium",
      "description": "Full access with trainer",
      "monthly_fee": "4500.00",
      "registration_fee": "2000.00",
      "is_active": true,
      "created_at": "2025-10-17T10:30:00.000000Z",
      "updated_at": "2025-10-17T10:30:00.000000Z"
    },
    "customer_id": 1,
    "customer_name": "John Doe",
    "registration_fee": "2000.00"
  }
}
```

#### Response (404 Not Found) - No Plan Assigned
```json
{
  "success": false,
  "message": "No plan assigned to this customer"
}
```

#### Frontend Integration Example
```javascript
const getCustomerPlan = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/plan`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 27. Update Customer's Plan
**PUT** `/customers/{id}/plan`

Changes a customer's plan to a different one.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "plan_id": 2
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer plan updated successfully",
  "data": {
    "customer": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "plan_id": 2,
      "plan_display": "Standard",
      "monthly_fee": "3000.00",
      "registration_fee": "1500.00",
      // ... other customer fields
    },
    "plan": {
      "id": 2,
      "name": "Standard",
      "description": "Gym floor access",
      "monthly_fee": "3000.00",
      "registration_fee": "1500.00",
      "is_active": true
    },
    "registration_fee": "1500.00"
  }
}
```

#### Response (422 Unprocessable Entity) - Validation Error
```json
{
  "success": false,
  "message": "Validation failed",
  "errors": {
    "plan_id": ["The plan id field is required."]
  }
}
```

#### Frontend Integration Example
```javascript
const updateCustomerPlan = async (customerId, planId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/customers/${customerId}/plan`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ plan_id: planId })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Updated Customer Management Endpoints

The existing customer endpoints have been updated to work with the new plan system:

### Updated Customer List (GET /customers)
Now includes plan information and supports filtering by plan:

#### Query Parameters
- `plan_id` (optional): Filter customers by specific plan ID
- All existing filters (status, type, subscription_status, has_trainer, search, etc.)

#### Response Example
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "John Doe",
        "email": "john@example.com",
        "plan_id": 1,
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "plan_model": {
          "id": 1,
          "name": "Premium",
          "description": "Full access with trainer",
          "monthly_fee": "4500.00",
          "registration_fee": "2000.00",
          "is_active": true
        },
        // ... other customer fields
      }
    ],
    "pagination": {
      "current_page": 1,
      "last_page": 1,
      "per_page": 15,
      "total": 1,
      "from": 1,
      "to": 1
    }
  }
}
```

### Updated Customer Creation (POST /customers)
Now accepts `plan_id` instead of the old `plan` enum:

#### Request Body
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "plan_id": 1,
  "monthly_fee": 4500.00,
  "mobile_number": "+1234567890",
  "address": "123 Main St"
}
```

### Updated Customer Update (PUT /customers/{id})
Now accepts `plan_id` for updating customer plans:

#### Request Body
```json
{
  "name": "John Smith",
  "plan_id": 2,
  "monthly_fee": 3000.00
}
```

---

## Customer Plan Management Frontend Integration Tips

### 1. Plan Selection Component
```javascript
const PlanSelector = ({ customerId, currentPlanId, onPlanChange }) => {
  const [plans, setPlans] = useState([]);
  const [loading, setLoading] = useState(false);

  const loadPlans = async () => {
    try {
      const data = await getPlans({ is_active: true });
      setPlans(data.data);
    } catch (error) {
      console.error('Error loading plans:', error);
    }
  };

  const handlePlanChange = async (newPlanId) => {
    setLoading(true);
    try {
      await updateCustomerPlan(customerId, newPlanId);
      onPlanChange(newPlanId);
    } catch (error) {
      console.error('Error updating plan:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPlans();
  }, []);

  return (
    <select 
      value={currentPlanId || ''} 
      onChange={(e) => handlePlanChange(parseInt(e.target.value))}
      disabled={loading}
    >
      <option value="">Select Plan</option>
      {plans.map(plan => (
        <option key={plan.id} value={plan.id}>
          {plan.name} - ${plan.monthly_fee}/month
        </option>
      ))}
    </select>
  );
};
```

### 2. Customer Plan Display Component
```javascript
const CustomerPlanCard = ({ customerId }) => {
  const [planData, setPlanData] = useState(null);
  const [loading, setLoading] = useState(true);

  const loadPlanData = async () => {
    try {
      const data = await getCustomerPlan(customerId);
      setPlanData(data);
    } catch (error) {
      console.error('Error loading plan:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPlanData();
  }, [customerId]);

  if (loading) return <div>Loading plan...</div>;
  if (!planData) return <div>No plan assigned</div>;

  return (
    <div className="plan-card">
      <h3>{planData.plan.name}</h3>
      <p>{planData.plan.description}</p>
      <div className="plan-fees">
        <div>Monthly Fee: ${planData.plan.monthly_fee}</div>
        <div>Registration Fee: ${planData.registration_fee}</div>
      </div>
    </div>
  );
};
```

### 3. Customer List with Plan Filter
```javascript
const CustomerListWithPlans = () => {
  const [customers, setCustomers] = useState([]);
  const [plans, setPlans] = useState([]);
  const [filters, setFilters] = useState({});

  const loadCustomers = async () => {
    try {
      const data = await getCustomers(filters);
      setCustomers(data.customers);
    } catch (error) {
      console.error('Error loading customers:', error);
    }
  };

  const loadPlans = async () => {
    try {
      const data = await getPlans({ is_active: true });
      setPlans(data.data);
    } catch (error) {
      console.error('Error loading plans:', error);
    }
  };

  useEffect(() => {
    loadCustomers();
    loadPlans();
  }, [filters]);

  return (
    <div>
      {/* Plan filter dropdown */}
      <select 
        value={filters.plan_id || ''} 
        onChange={(e) => setFilters({...filters, plan_id: e.target.value || undefined})}
      >
        <option value="">All Plans</option>
        {plans.map(plan => (
          <option key={plan.id} value={plan.id}>{plan.name}</option>
        ))}
      </select>

      {/* Customer list */}
      {customers.map(customer => (
        <div key={customer.id} className="customer-card">
          <h3>{customer.name}</h3>
          <p>Plan: {customer.plan_display}</p>
          <p>Monthly Fee: ${customer.monthly_fee}</p>
          <p>Registration Fee: ${customer.registration_fee}</p>
        </div>
      ))}
    </div>
  );
};
```

---

## Fee Tracking and Submission System

### 28. Submit Fee Payment
**POST** `/fee-submissions/submit`

Submits a fee payment (monthly fee, registration fee, etc.) and automatically generates an invoice.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "customer_id": 1,
  "fee_type": "monthly_fee",
  "amount": 4500.00,
  "payment_date": "2025-10-17",
  "payment_method": "cash",
  "notes": "Monthly fee payment"
}
```

#### Fee Types
- `monthly_fee` - Monthly subscription fee
- `registration_fee` - One-time registration fee
- `late_fee` - Late payment penalty
- `other` - Other fee types

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Fee submitted successfully",
  "data": {
    "fee_submission": {
      "id": 1,
      "customer_id": 1,
      "invoice_id": 1,
      "fee_type": "monthly_fee",
      "amount": "4500.00",
      "payment_date": "2025-10-17",
      "payment_method": "cash",
      "notes": "Monthly fee payment",
      "fee_type_display": "Monthly Fee",
      "payment_method_display": "Cash",
      "days_ago": 0,
      "created_at": "2025-10-17T18:30:00.000000Z",
      "updated_at": "2025-10-17T18:30:00.000000Z"
    },
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "last_payment_date": "2025-10-17",
      "next_due_date": "2025-11-17",
      "subscription_status": "paid",
      "overdue_days": 0,
      "fee_status": "PAID 0 days ago",
      "days_since_payment": 0,
      "days_until_due": 31,
      "is_fee_overdue": false
    },
    "invoice": {
      "id": 1,
      "invoice_number": "INV-20251017-0001",
      "customer_id": 1,
      "subtotal": "4500.00",
      "total_amount": "4500.00",
      "payment_status": "paid"
    }
  }
}
```

---

### 29. Get Customer Fee Status
**GET** `/customers/{id}/fee-status`

Retrieves comprehensive fee status information for a customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "email": "asim@example.com",
      "plan_id": 1,
      "plan_display": "Premium",
      "monthly_fee": "4500.00",
      "registration_fee": "2000.00",
      "last_payment_date": "2025-10-17",
      "next_due_date": "2025-11-17",
      "subscription_status": "paid",
      "overdue_days": 0
    },
    "fee_status": "PAID 0 days ago",
    "days_since_payment": 0,
    "days_until_due": 31,
    "is_overdue": false,
    "last_payment_date": "2025-10-17",
    "next_due_date": "2025-11-17",
    "monthly_fee": "4500.00",
    "registration_fee": "2000.00",
    "recent_fee_submissions": [
      {
        "id": 1,
        "fee_type": "monthly_fee",
        "amount": "4500.00",
        "payment_date": "2025-10-17",
        "payment_method": "cash",
        "fee_type_display": "Monthly Fee",
        "payment_method_display": "Cash",
        "days_ago": 0
      }
    ]
  }
}
```

---

### 30. Get Customer Fee History
**GET** `/customers/{id}/fee-history`

Retrieves the complete fee payment history for a customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `fee_type` (optional): Filter by fee type (`monthly_fee`, `registration_fee`, `late_fee`, `other`)
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `sort_by` (optional): Sort field (default: `payment_date`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "email": "asim@example.com"
    },
    "fee_submissions": {
      "current_page": 1,
      "data": [
        {
          "id": 1,
          "customer_id": 1,
          "invoice_id": 1,
          "fee_type": "monthly_fee",
          "amount": "4500.00",
          "payment_date": "2025-10-17",
          "payment_method": "cash",
          "notes": "Monthly fee payment",
          "fee_type_display": "Monthly Fee",
          "payment_method_display": "Cash",
          "days_ago": 0,
          "created_at": "2025-10-17T18:30:00.000000Z"
        }
      ],
      "first_page_url": "http://127.0.0.1:8000/api/customers/1/fee-history?page=1",
      "from": 1,
      "last_page": 1,
      "last_page_url": "http://127.0.0.1:8000/api/customers/1/fee-history?page=1",
      "links": [],
      "next_page_url": null,
      "path": "http://127.0.0.1:8000/api/customers/1/fee-history",
      "per_page": 15,
      "prev_page_url": null,
      "to": 1,
      "total": 1
    }
  }
}
```

---

### 31. Get Fee Submission Statistics
**GET** `/fee-submissions-statistics`

Retrieves comprehensive statistics about fee submissions.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_fee_submissions": 150,
      "total_amount_collected": "675000.00",
      "monthly_fees_collected": "450000.00",
      "registration_fees_collected": "200000.00",
      "today_collections": "22500.00",
      "this_month_collections": "180000.00"
    }
  }
}
```

---

## Updated Customer APIs with Fee Tracking

### Enhanced Customer List (GET /customers)
Now includes fee status information and recent invoices:

#### Response Example
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "Asim Mahmood",
        "email": "asim@example.com",
        "plan_id": 1,
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "last_payment_date": "2025-10-17",
        "next_due_date": "2025-11-17",
        "subscription_status": "paid",
        "overdue_days": 0,
        "fee_status": "PAID 0 days ago",
        "days_since_payment": 0,
        "days_until_due": 31,
        "is_fee_overdue": false,
        "plan_model": {
          "id": 1,
          "name": "Premium",
          "monthly_fee": "4500.00",
          "registration_fee": "2000.00"
        },
        "fee_submissions": [
          {
            "id": 1,
            "fee_type": "monthly_fee",
            "amount": "4500.00",
            "payment_date": "2025-10-17",
            "fee_type_display": "Monthly Fee",
            "days_ago": 0
          }
        ],
        "invoices": [
          {
            "id": 12,
            "invoice_number": "INV-20251017-0012",
            "total_amount": "2000.00",
            "payment_status": "paid",
            "payment_method": "cash",
            "created_at": "2025-10-17T18:30:00.000000Z"
          }
        ]
      }
    ]
  }
}
```

---

## Fee Tracking Frontend Integration Examples

### 1. Fee Status Display Component
```javascript
const FeeStatusCard = ({ customerId }) => {
  const [feeStatus, setFeeStatus] = useState(null);
  const [loading, setLoading] = useState(true);

  const loadFeeStatus = async () => {
    try {
      const response = await fetch(`/api/customers/${customerId}/fee-status`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      setFeeStatus(data.data);
    } catch (error) {
      console.error('Error loading fee status:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadFeeStatus();
  }, [customerId]);

  if (loading) return <div>Loading fee status...</div>;
  if (!feeStatus) return <div>No fee status available</div>;

  return (
    <div className="fee-status-card">
      <h3>Fee Status</h3>
      <div className={`status ${feeStatus.is_overdue ? 'overdue' : 'paid'}`}>
        {feeStatus.fee_status}
      </div>
      <div className="details">
        <p>Last Payment: {feeStatus.last_payment_date}</p>
        <p>Next Due: {feeStatus.next_due_date}</p>
        <p>Monthly Fee: ${feeStatus.monthly_fee}</p>
        <p>Registration Fee: ${feeStatus.registration_fee}</p>
      </div>
    </div>
  );
};
```

### 2. Fee Submission Form
```javascript
const FeeSubmissionForm = ({ customerId, onFeeSubmitted }) => {
  const [formData, setFormData] = useState({
    fee_type: 'monthly_fee',
    amount: '',
    payment_method: 'cash',
    notes: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/fee-submissions/submit', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          customer_id: customerId,
          ...formData
        })
      });
      const data = await response.json();
      if (data.success) {
        onFeeSubmitted(data.data);
        setFormData({ fee_type: 'monthly_fee', amount: '', payment_method: 'cash', notes: '' });
      }
    } catch (error) {
      console.error('Error submitting fee:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <select 
        value={formData.fee_type} 
        onChange={(e) => setFormData({...formData, fee_type: e.target.value})}
      >
        <option value="monthly_fee">Monthly Fee</option>
        <option value="registration_fee">Registration Fee</option>
        <option value="late_fee">Late Fee</option>
        <option value="other">Other</option>
      </select>
      
      <input
        type="number"
        placeholder="Amount"
        value={formData.amount}
        onChange={(e) => setFormData({...formData, amount: e.target.value})}
        required
      />
      
      <select 
        value={formData.payment_method} 
        onChange={(e) => setFormData({...formData, payment_method: e.target.value})}
      >
        <option value="cash">Cash</option>
        <option value="card">Card</option>
        <option value="bank_transfer">Bank Transfer</option>
        <option value="digital_wallet">Digital Wallet</option>
      </select>
      
      <textarea
        placeholder="Notes (optional)"
        value={formData.notes}
        onChange={(e) => setFormData({...formData, notes: e.target.value})}
      />
      
      <button type="submit">Submit Fee</button>
    </form>
  );
};
```

### 3. Fee History Table
```javascript
const FeeHistoryTable = ({ customerId }) => {
  const [feeHistory, setFeeHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  const loadFeeHistory = async () => {
    try {
      const response = await fetch(`/api/customers/${customerId}/fee-history`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      setFeeHistory(data.data.fee_submissions.data);
    } catch (error) {
      console.error('Error loading fee history:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadFeeHistory();
  }, [customerId]);

  return (
    <div className="fee-history-table">
      <h3>Fee Payment History</h3>
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Method</th>
            <th>Days Ago</th>
          </tr>
        </thead>
        <tbody>
          {feeHistory.map(fee => (
            <tr key={fee.id}>
              <td>{fee.payment_date}</td>
              <td>{fee.fee_type_display}</td>
              <td>${fee.amount}</td>
              <td>{fee.payment_method_display}</td>
              <td>{fee.days_ago} days ago</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
```

---

---

## Thermal Printer Integration

### Thermal Printer Invoice Format

The invoice system is optimized for thermal printers (80mm width) commonly used in POS systems. The invoice template includes:

#### Features:
- **80mm width** - Standard thermal printer width
- **Compact layout** - Optimized for small receipts
- **Monospace font** - Courier New for consistent alignment
- **Essential information only** - Company details, customer info, items, totals
- **Print-friendly** - Minimal margins and compact spacing

#### Invoice Template Includes:
- Company header with name, address, phone, email
- Invoice number, date, and time
- Customer information (name, email, phone)
- Itemized list with description, quantity, price, total
- Subtotal, tax, discount, and final total
- Payment status and method
- Notes section
- Thank you message
- Generation timestamp

### Thermal Printer API Endpoints

#### Print Invoice to Thermal Printer
**GET** `/invoices/{id}/print`

Opens the invoice in a new window optimized for thermal printing.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response
- Opens PDF in browser for direct printing
- Optimized for 80mm thermal printers
- Can be sent directly to thermal printer

#### Frontend Integration Example
```javascript
const printInvoice = async (invoiceId) => {
  try {
    const response = await fetch(`/api/invoices/${invoiceId}/print`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      // Open in new window for printing
      const printWindow = window.open('', '_blank');
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      printWindow.location.href = url;
    }
  } catch (error) {
    console.error('Error printing invoice:', error);
  }
};
```

#### Thermal Printer Setup Tips

1. **Printer Configuration:**
   - Set paper width to 80mm
   - Use thermal paper (no ink required)
   - Configure for receipt printing

2. **Browser Settings:**
   - Disable headers and footers
   - Set margins to minimum (0.1 inch)
   - Use "Print to PDF" then send to printer

3. **POS Integration:**
   - Use `window.print()` after loading the invoice
   - Configure browser to auto-print
   - Set up print queue for multiple invoices

---

This documentation provides everything your React frontend team needs to integrate with authentication, customer management, image upload, plan management, customer plan relationships, comprehensive fee tracking with automatic invoice generation, and thermal printer integration for POS systems. The system includes proper fee status tracking, payment history, automatic invoice generation, and thermal printer-optimized receipts.
