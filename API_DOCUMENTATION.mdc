# POS Dashboard Backend API Documentation

## Base URL
```
https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api
```

## Authentication
All protected endpoints require a Bearer token in the Authorization header:
```
Authorization: Bearer {your_token_here}
```

## Response Format
All API responses follow this consistent format:

### Success Response
```json
{
  "success": true,
  "message": "Operation successful",
  "data": {
    // Response data here
  }
}
```

### Error Response
```json
{
  "success": false,
  "message": "Error description",
  "errors": {
    // Validation errors (if any)
  }
}
```

---

## Authentication Endpoints

### 1. Register User
**POST** `/register`

Creates a new user account.

#### Request Body
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "password": "password123",
  "password_confirmation": "password123",
  "role": "staff" // Optional: "admin" or "staff" (defaults to "staff")
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "User registered successfully",
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "created_at": "2025-01-15T10:30:00.000000Z"
    },
    "token": "1|abcdef123456...",
    "token_type": "Bearer"
  }
}
```

#### Frontend Integration Example
```javascript
const registerUser = async (userData) => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/register', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(userData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Store token in localStorage or state management
    localStorage.setItem('auth_token', data.data.token);
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 2. Login User
**POST** `/login`

Authenticates a user and returns an access token.

#### Request Body
```json
{
  "email": "john@example.com",
  "password": "password123",
  "remember_me": true // Optional: extends token expiration to 30 days
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Login successful",
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "last_login": "2025-01-15T10:30:00.000000Z"
    },
    "token": "1|abcdef123456...",
    "token_type": "Bearer",
    "expires_in": 2592000 // Token expiration in seconds (30 days if remember_me=true, 1 day otherwise)
  }
}
```

#### Frontend Integration Example
```javascript
const loginUser = async (credentials) => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(credentials)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Store token and user data
    localStorage.setItem('auth_token', data.data.token);
    localStorage.setItem('user', JSON.stringify(data.data.user));
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 3. Logout User
**POST** `/logout`

Invalidates the current access token.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Logout successful"
}
```

#### Frontend Integration Example
```javascript
const logoutUser = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/logout', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Clear stored authentication data
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user');
  }
  
  return data;
};
```

---

### 4. Get User Profile
**GET** `/profile`

Retrieves the authenticated user's profile information.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "created_at": "2025-01-15T10:30:00.000000Z",
      "updated_at": "2025-01-15T10:30:00.000000Z"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getUserProfile = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/profile', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 5. Update User Profile
**PUT** `/profile`

Updates the authenticated user's profile information.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "John Smith", // Optional
  "email": "johnsmith@example.com", // Optional
  "remember_me": false // Optional
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile updated successfully",
  "data": {
    "user": {
      "id": 1,
      "name": "John Smith",
      "email": "johnsmith@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": false,
      "updated_at": "2025-01-15T11:00:00.000000Z"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const updateUserProfile = async (profileData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/profile', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(profileData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    // Update stored user data
    localStorage.setItem('user', JSON.stringify(data.data.user));
    return data.data.user;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 6. Change Password
**POST** `/change-password`

Changes the authenticated user's password.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "current_password": "oldpassword123",
  "password": "newpassword123",
  "password_confirmation": "newpassword123"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Password changed successfully"
}
```

#### Frontend Integration Example
```javascript
const changePassword = async (passwordData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/change-password', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(passwordData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Dashboard Endpoints

### 7. Test Authentication
**GET** `/user`

Test endpoint to verify authentication is working.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "role": "staff",
      "role_display": "Staff",
      "remember_me": true,
      "created_at": "2025-01-15T10:30:00.000000Z",
      "updated_at": "2025-01-15T10:30:00.000000Z"
    },
    "message": "You are authenticated!"
  }
}
```

---

### 8. POS Dashboard
**GET** `/dashboard`

Access the main POS dashboard (requires staff or admin role).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "message": "Welcome to POS dashboard!",
    "user": {
      // User object here
    }
  }
}
```

---

### 9. Admin Dashboard
**GET** `/admin/dashboard`

Access the admin dashboard (requires admin role only).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "message": "Welcome to admin dashboard!",
    "user": {
      // User object here
    }
  }
}
```

---

## Error Handling

### Common HTTP Status Codes
- `200 OK` - Request successful
- `201 Created` - Resource created successfully
- `400 Bad Request` - Invalid request data
- `401 Unauthorized` - Authentication required or invalid credentials
- `403 Forbidden` - Insufficient permissions (role-based access)
- `422 Unprocessable Entity` - Validation errors
- `500 Internal Server Error` - Server error

### Authentication Errors
```json
{
  "success": false,
  "message": "Invalid credentials"
}
```

### Validation Errors
```json
{
  "success": false,
  "message": "Validation failed",
  "errors": {
    "email": ["The email field is required."],
    "password": ["The password field is required."]
  }
}
```

### Authorization Errors
```json
{
  "success": false,
  "message": "Access denied. Admin role required."
}
```

---

## Frontend Integration Tips

### 1. Token Management
```javascript
// Store token after login/register
localStorage.setItem('auth_token', token);

// Include token in requests
const token = localStorage.getItem('auth_token');
headers: {
  'Authorization': `Bearer ${token}`,
  'Content-Type': 'application/json',
  'Accept': 'application/json'
}
```

### 2. Role-Based UI
```javascript
// Check user role for conditional rendering
const user = JSON.parse(localStorage.getItem('user'));
const isAdmin = user?.role === 'admin';
const isStaff = user?.role === 'staff';

// Show admin-only features
{isAdmin && <AdminPanel />}

// Show staff/admin features
{(isStaff || isAdmin) && <POSInterface />}
```

### 3. Remember Me Feature
```javascript
// When logging in, pass remember_me preference
const loginData = {
  email: 'user@example.com',
  password: 'password123',
  remember_me: rememberMeCheckbox.checked // true = 30 days, false = 1 day
};
```

### 4. Error Handling
```javascript
const handleApiCall = async (apiFunction) => {
  try {
    const result = await apiFunction();
    return result;
  } catch (error) {
    if (error.message.includes('Invalid credentials')) {
      // Redirect to login
      redirectToLogin();
    } else if (error.message.includes('Access denied')) {
      // Show permission denied message
      showPermissionDenied();
    } else {
      // Show generic error
      showError(error.message);
    }
  }
};
```

### 5. Auto-logout on Token Expiry
```javascript
// Check token expiry and auto-logout
const checkTokenExpiry = () => {
  const token = localStorage.getItem('auth_token');
  if (!token) return;
  
  // You can decode the JWT token to check expiry
  // Or make a test API call to see if token is still valid
  fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/user', {
    headers: { 'Authorization': `Bearer ${token}` }
  })
  .then(response => {
    if (!response.ok) {
      // Token expired, logout user
      logoutUser();
    }
  });
};

// Check token validity periodically
setInterval(checkTokenExpiry, 60000); // Check every minute
```

---

## User Roles

### Admin Role
- Full access to all features
- Can access `/admin/dashboard`
- Can create other admin users
- Full CRUD operations on all resources

### Staff Role
- Access to POS operations
- Can access `/dashboard`
- Limited access to certain features
- Cannot access admin-only endpoints

---

## Customer Management Endpoints

### 10. Get All Customers
**GET** `/customers`

Retrieves a paginated list of customers with filtering and sorting options.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `status` (optional): Filter by status (`active`, `inactive`, `suspended`)
- `type` (optional): Filter by type (`new`, `old`)
- `plan` (optional): Filter by plan (`basic`, `standard`, `premium`)
- `subscription_status` (optional): Filter by subscription status (`active`, `overdue`, `paid`, `inactive`)
- `has_trainer` (optional): Filter by trainer assignment (`true`, `false`)
- `search` (optional): Search by name, email, or mobile number
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "Asim Khan",
        "email": "asim@gmail.com",
        "mobile_number": "+92 321 2345678",
        "address": "House no. 123, Street no. 123, Lahore",
        "profile_picture_url": null,
        "type": "new",
        "type_display": "New",
        "status": "active",
        "status_display": "Active",
        "member_type": "new",
        "member_type_display": "New",
        "plan": "premium",
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "subscription_status": "overdue",
        "subscription_status_display": "Overdue",
        "last_payment_date": "2024-01-15",
        "next_due_date": "2024-02-15",
        "overdue_days": 608,
        "overdue_days_text": "OVERDUE 608 days",
        "has_trainer": true,
        "trainer_name": "Ahmed Ali",
        "trainer_display": "Yes (Ahmed Ali)",
        "age": 28,
        "weight": "75.00",
        "fitness_goals": "Weight Loss",
        "emergency_contact_phone": "+92 300 1234567",
        "emergency_contact_name": null,
        "total_spent": "7650.00",
        "total_orders": 4,
        "total_items_purchased": 7,
        "last_purchase_date": "2024-02-15",
        "notes": null,
        "created_at": "2025-01-15T10:30:00.000000Z",
        "updated_at": "2025-01-15T10:30:00.000000Z"
      }
    ],
    "pagination": {
      "current_page": 1,
      "last_page": 1,
      "per_page": 15,
      "total": 1,
      "from": 1,
      "to": 1
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomers = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage examples:
// getCustomers({ status: 'active', plan: 'premium' })
// getCustomers({ search: 'asim', sort_by: 'name', sort_order: 'asc' })
// getCustomers({ has_trainer: true, per_page: 20 })
```

---

### 11. Create Customer
**POST** `/customers`

Creates a new customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "Asim Khan",
  "email": "asim@gmail.com",
  "mobile_number": "+92 321 2345678",
  "address": "House no. 123, Street no. 123, Lahore",
  "profile_picture_url": "https://example.com/profile.jpg",
  "type": "new",
  "status": "active",
  "member_type": "new",
  "plan": "premium",
  "monthly_fee": 4500.00,
  "subscription_status": "active",
  "last_payment_date": "2024-01-15",
  "next_due_date": "2024-02-15",
  "overdue_days": 0,
  "has_trainer": true,
  "trainer_name": "Ahmed Ali",
  "trainer_id": 1,
  "age": 28,
  "weight": 75.5,
  "fitness_goals": "Weight Loss",
  "emergency_contact_phone": "+92 300 1234567",
  "emergency_contact_name": "Fatima Khan",
  "notes": "Regular customer, prefers morning sessions"
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Customer created successfully",
  "data": {
    "customer": {
      // Customer object with all fields
    }
  }
}
```

#### Frontend Integration Example
```javascript
const createCustomer = async (customerData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(customerData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 12. Get Customer Details
**GET** `/customers/{id}`

Retrieves detailed information about a specific customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      // Complete customer object with all fields
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomer = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 13. Update Customer
**PUT** `/customers/{id}`

Updates an existing customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Request Body
```json
{
  "name": "Asim Khan Updated",
  "weight": 74.5,
  "fitness_goals": "Muscle Building",
  "monthly_fee": 5000.00
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer updated successfully",
  "data": {
    "customer": {
      // Updated customer object
    }
  }
}
```

#### Frontend Integration Example
```javascript
const updateCustomer = async (customerId, updateData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(updateData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 14. Delete Customer
**DELETE** `/customers/{id}`

Deletes a customer record.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer deleted successfully"
}
```

#### Frontend Integration Example
```javascript
const deleteCustomer = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 15. Get Customer Statistics
**GET** `/customers-statistics`

Retrieves aggregated statistics about customers.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_customers": 150,
      "active_customers": 120,
      "new_customers": 45,
      "overdue_customers": 25,
      "customers_with_trainers": 80,
      "premium_customers": 60,
      "total_revenue": "675000.00",
      "average_monthly_fee": "4500.00"
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getCustomerStatistics = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers-statistics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.statistics;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 16. Mark Customer as Paid
**POST** `/customers/{id}/mark-as-paid`

Marks a customer's subscription as paid and updates payment dates.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer marked as paid successfully",
  "data": {
    "customer": {
      // Updated customer object with new payment status
    }
  }
}
```

#### Frontend Integration Example
```javascript
const markCustomerAsPaid = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/mark-as-paid`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 17. Send Payment Reminder
**POST** `/customers/{id}/send-reminder`

Sends a payment reminder to the customer and updates overdue status.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Payment reminder sent successfully",
  "data": {
    "customer": {
      // Updated customer object with new overdue status
    }
  }
}
```

#### Frontend Integration Example
```javascript
const sendPaymentReminder = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/send-reminder`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Customer Management Frontend Integration Tips

### 1. Customer List Component
```javascript
const CustomerList = () => {
  const [customers, setCustomers] = useState([]);
  const [filters, setFilters] = useState({});
  const [pagination, setPagination] = useState({});

  const loadCustomers = async () => {
    try {
      const data = await getCustomers(filters);
      setCustomers(data.customers);
      setPagination(data.pagination);
    } catch (error) {
      console.error('Error loading customers:', error);
    }
  };

  useEffect(() => {
    loadCustomers();
  }, [filters]);

  return (
    <div>
      {/* Filter controls */}
      <FilterControls filters={filters} onFiltersChange={setFilters} />
      
      {/* Customer table */}
      <CustomerTable customers={customers} onRefresh={loadCustomers} />
      
      {/* Pagination */}
      <Pagination pagination={pagination} onPageChange={loadCustomers} />
    </div>
  );
};
```

### 2. Customer Profile Component
```javascript
const CustomerProfile = ({ customerId }) => {
  const [customer, setCustomer] = useState(null);

  const loadCustomer = async () => {
    try {
      const customerData = await getCustomer(customerId);
      setCustomer(customerData);
    } catch (error) {
      console.error('Error loading customer:', error);
    }
  };

  useEffect(() => {
    loadCustomer();
  }, [customerId]);

  if (!customer) return <div>Loading...</div>;

  return (
    <div>
      {/* Customer header with photo, name, email */}
      <CustomerHeader customer={customer} />
      
      {/* Key metrics cards */}
      <CustomerMetrics customer={customer} />
      
      {/* Contact and membership details */}
      <CustomerDetails customer={customer} />
    </div>
  );
};
```

### 3. Payment Management
```javascript
const PaymentActions = ({ customer }) => {
  const handleMarkAsPaid = async () => {
    try {
      await markCustomerAsPaid(customer.id);
      // Refresh customer data or update local state
      window.location.reload();
    } catch (error) {
      console.error('Error marking as paid:', error);
    }
  };

  const handleSendReminder = async () => {
    try {
      await sendPaymentReminder(customer.id);
      // Refresh customer data or update local state
      window.location.reload();
    } catch (error) {
      console.error('Error sending reminder:', error);
    }
  };

  return (
    <div>
      <button onClick={handleMarkAsPaid}>Mark as Paid</button>
      <button onClick={handleSendReminder}>Send Reminder</button>
    </div>
  );
};
```

---

---

## Customer Profile Picture Management Endpoints

### 18. Upload Customer Profile Picture
**POST** `/customers/{id}/upload-profile-picture`

Uploads a profile picture for a customer.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: multipart/form-data
```

#### Request Body (Form Data)
- `profile_picture` (file, required): Image file (jpeg, png, jpg, gif, webp, max 2MB)

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile picture uploaded successfully",
  "data": {
    "customer": {
      // Updated customer object with new profile_picture_url
    },
    "profile_picture_url": "http://127.0.0.1:8000/storage/customers/profile-pictures/customer_1_1642123456_abc123def4.jpg"
  }
}
```

#### Frontend Integration Example
```javascript
const uploadCustomerProfilePicture = async (customerId, imageFile) => {
  const token = localStorage.getItem('auth_token');
  
  const formData = new FormData();
  formData.append('profile_picture', imageFile);
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/upload-profile-picture`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      // Don't set Content-Type header - let browser set it for FormData
    },
    body: formData
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage with file input
const handleImageUpload = async (event) => {
  const file = event.target.files[0];
  if (file) {
    try {
      const result = await uploadCustomerProfilePicture(customerId, file);
      setProfilePictureUrl(result.profile_picture_url);
    } catch (error) {
      console.error('Error uploading image:', error);
    }
  }
};
```

---

### 19. Delete Customer Profile Picture
**DELETE** `/customers/{id}/delete-profile-picture`

Deletes a customer's profile picture.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Profile picture deleted successfully",
  "data": {
    "customer": {
      // Updated customer object with profile_picture_url set to null
    }
  }
}
```

#### Frontend Integration Example
```javascript
const deleteCustomerProfilePicture = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/delete-profile-picture`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customer;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 20. Get Customer Profile Picture
**GET** `/customers/{id}/profile-picture`

Retrieves a customer's profile picture URL.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "profile_picture_url": "http://127.0.0.1:8000/storage/customers/profile-pictures/customer_1_1642123456_abc123def4.jpg",
    "customer_id": 1,
    "customer_name": "Asim Khan"
  }
}
```

#### Response (404 Not Found) - No Profile Picture
```json
{
  "success": false,
  "message": "No profile picture found for this customer"
}
```

#### Frontend Integration Example
```javascript
const getCustomerProfilePicture = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/profile-picture`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.profile_picture_url;
  } else {
    return null; // No profile picture
  }
};
```

---

## Image Upload Frontend Integration Tips

### 1. Image Upload Component
```javascript
const ProfilePictureUpload = ({ customerId, currentImageUrl, onImageChange }) => {
  const [uploading, setUploading] = useState(false);
  const [previewUrl, setPreviewUrl] = useState(currentImageUrl);

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      // Validate file
      if (file.size > 2 * 1024 * 1024) {
        alert('File size must be less than 2MB');
        return;
      }
      
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => setPreviewUrl(e.target.result);
      reader.readAsDataURL(file);

      // Upload file
      uploadImage(file);
    }
  };

  const uploadImage = async (file) => {
    setUploading(true);
    try {
      const result = await uploadCustomerProfilePicture(customerId, file);
      onImageChange(result.profile_picture_url);
    } catch (error) {
      console.error('Upload failed:', error);
      alert('Failed to upload image');
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async () => {
    try {
      await deleteCustomerProfilePicture(customerId);
      setPreviewUrl(null);
      onImageChange(null);
    } catch (error) {
      console.error('Delete failed:', error);
    }
  };

  return (
    <div className="profile-picture-upload">
      <div className="current-image">
        {previewUrl ? (
          <img src={previewUrl} alt="Profile" style={{ width: '150px', height: '150px', borderRadius: '50%', objectFit: 'cover' }} />
        ) : (
          <div className="placeholder" style={{ width: '150px', height: '150px', borderRadius: '50%', backgroundColor: '#f0f0f0', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
            No Image
          </div>
        )}
      </div>
      
      <div className="upload-controls">
        <input
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          disabled={uploading}
          style={{ display: 'none' }}
          id="image-upload"
        />
        <label htmlFor="image-upload" className="upload-button">
          {uploading ? 'Uploading...' : 'Upload Image'}
        </label>
        
        {previewUrl && (
          <button onClick={handleDelete} className="delete-button">
            Delete Image
          </button>
        )}
      </div>
    </div>
  );
};
```

### 2. Image Display Component
```javascript
const CustomerProfilePicture = ({ customer, size = 'medium' }) => {
  const [imageUrl, setImageUrl] = useState(customer.profile_picture_url);

  const sizeClasses = {
    small: 'w-12 h-12',
    medium: 'w-24 h-24',
    large: 'w-32 h-32'
  };

  const handleImageError = () => {
    setImageUrl(null);
  };

  return (
    <div className={`${sizeClasses[size]} rounded-full overflow-hidden bg-gray-200 flex items-center justify-center`}>
      {imageUrl ? (
        <img
          src={imageUrl}
          alt={customer.name}
          className="w-full h-full object-cover"
          onError={handleImageError}
        />
      ) : (
        <div className="text-gray-500 text-center">
          <div className="text-2xl">👤</div>
        </div>
      )}
    </div>
  );
};
```

### 3. File Validation Helper
```javascript
const validateImageFile = (file) => {
  const errors = [];
  
  // Check file size (2MB max)
  if (file.size > 2 * 1024 * 1024) {
    errors.push('File size must be less than 2MB');
  }
  
  // Check file type
  const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/gif', 'image/webp'];
  if (!allowedTypes.includes(file.type)) {
    errors.push('File must be an image (JPEG, PNG, JPG, GIF, or WebP)');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};
```

---

## Image Storage Information

### Storage Location
- **Local Storage**: `storage/app/public/customers/profile-pictures/`
- **Public URL**: `http://127.0.0.1:8000/storage/customers/profile-pictures/`
- **File Naming**: `customer_{id}_{timestamp}_{random}.{extension}`

### Supported Formats
- JPEG (.jpg, .jpeg)
- PNG (.png)
- GIF (.gif)
- WebP (.webp)

### File Size Limits
- **Maximum Size**: 2MB per image
- **Validation**: Server-side validation with proper error messages

### Security Features
- File type validation (images only)
- File size limits
- Automatic old file cleanup when uploading new images
- Unique filename generation to prevent conflicts

---

## Plan Management Endpoints

All Plan endpoints require authentication and the `staff_or_admin` middleware.

### 21. Get All Plans
**GET** `/plans`

Retrieves a paginated list of plans with optional filters.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `search` (optional): Search by `name` or `description`
- `is_active` (optional): Filter by active status (`true`, `false`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 1,
        "name": "Premium",
        "description": "Full access with trainer",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "is_active": true,
        "created_at": "2025-10-17T10:30:00.000000Z",
        "updated_at": "2025-10-17T10:30:00.000000Z"
      }
    ],
    "first_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans?page=1",
    "from": 1,
    "last_page": 1,
    "last_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans?page=1",
    "links": [],
    "next_page_url": null,
    "path": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans",
    "per_page": 15,
    "prev_page_url": null,
    "to": 1,
    "total": 1
  }
}
```

---

### 22. Create Plan
**POST** `/plans`

Creates a new plan.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "name": "Standard",
  "description": "Gym floor access",
  "monthly_fee": 3000,
  "registration_fee": 1500,
  "is_active": true
}
```

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Plan created successfully",
  "data": {
    "id": 2,
    "name": "Standard",
    "description": "Gym floor access",
    "monthly_fee": "3000.00",
    "registration_fee": "1500.00",
    "is_active": true,
    "created_at": "2025-10-17T11:00:00.000000Z",
    "updated_at": "2025-10-17T11:00:00.000000Z"
  }
}
```

---

### 23. Get Plan Details
**GET** `/plans/{id}`

Retrieves details for a specific plan.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Premium",
    "description": "Full access with trainer",
    "monthly_fee": "4500.00",
    "registration_fee": "2000.00",
    "is_active": true,
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T10:30:00.000000Z"
  }
}
```

---

### 24. Update Plan
**PUT** `/plans/{id}`

Updates an existing plan (partial updates allowed; use PATCH or PUT).

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body (examples)
```json
{
  "name": "Premium Plus",
  "monthly_fee": 5000,
  "registration_fee": 2500,
  "is_active": true
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Plan updated successfully",
  "data": {
    "id": 1,
    "name": "Premium Plus",
    "description": "Full access with trainer",
    "monthly_fee": "5000.00",
    "registration_fee": "2500.00",
    "is_active": true,
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T12:00:00.000000Z"
  }
}
```

---

### 25. Delete Plan
**DELETE** `/plans/{id}`

Deletes a plan.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Plan deleted successfully"
}
```

---

### Frontend Integration Examples (Plans)

```javascript
// List plans
const getPlans = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const query = new URLSearchParams(filters);
  const res = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans?${query}`, {
    headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data; // Laravel paginator object
};

// Create plan
const createPlan = async (payload) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans', {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify(payload)
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data;
};

// Update plan
const updatePlan = async (id, payload) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans/${id}`, {
    method: 'PUT',
    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json', 'Accept': 'application/json' },
    body: JSON.stringify(payload)
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.data;
};

// Delete plan
const deletePlan = async (id) => {
  const token = localStorage.getItem('auth_token');
  const res = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/plans/${id}`, {
    method: 'DELETE',
    headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' }
  });
  const data = await res.json();
  if (!data.success) throw new Error(data.message);
  return data.message;
};
```

---

## Customer Plan Management Endpoints

These endpoints allow you to manage customer plans and view plan details.

### 26. Get Customer's Plan Details
**GET** `/customers/{id}/plan`

Retrieves the plan details for a specific customer, including registration fee.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "plan": {
      "id": 1,
      "name": "Premium",
      "description": "Full access with trainer",
      "monthly_fee": "4500.00",
      "registration_fee": "2000.00",
      "is_active": true,
      "created_at": "2025-10-17T10:30:00.000000Z",
      "updated_at": "2025-10-17T10:30:00.000000Z"
    },
    "customer_id": 1,
    "customer_name": "John Doe",
    "registration_fee": "2000.00"
  }
}
```

#### Response (404 Not Found) - No Plan Assigned
```json
{
  "success": false,
  "message": "No plan assigned to this customer"
}
```

#### Frontend Integration Example
```javascript
const getCustomerPlan = async (customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/plan`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 27. Update Customer's Plan
**PUT** `/customers/{id}/plan`

Changes a customer's plan to a different one.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "plan_id": 2
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Customer plan updated successfully",
  "data": {
    "customer": {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "plan_id": 2,
      "plan_display": "Standard",
      "monthly_fee": "3000.00",
      "registration_fee": "1500.00",
      // ... other customer fields
    },
    "plan": {
      "id": 2,
      "name": "Standard",
      "description": "Gym floor access",
      "monthly_fee": "3000.00",
      "registration_fee": "1500.00",
      "is_active": true
    },
    "registration_fee": "1500.00"
  }
}
```

#### Response (422 Unprocessable Entity) - Validation Error
```json
{
  "success": false,
  "message": "Validation failed",
  "errors": {
    "plan_id": ["The plan id field is required."]
  }
}
```

#### Frontend Integration Example
```javascript
const updateCustomerPlan = async (customerId, planId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/${customerId}/plan`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ plan_id: planId })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Updated Customer Management Endpoints

The existing customer endpoints have been updated to work with the new plan system:

### Updated Customer List (GET /customers)
Now includes plan information and supports filtering by plan:

#### Query Parameters
- `plan_id` (optional): Filter customers by specific plan ID
- All existing filters (status, type, subscription_status, has_trainer, search, etc.)

#### Response Example
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "John Doe",
        "email": "john@example.com",
        "plan_id": 1,
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "plan_model": {
          "id": 1,
          "name": "Premium",
          "description": "Full access with trainer",
          "monthly_fee": "4500.00",
          "registration_fee": "2000.00",
          "is_active": true
        },
        // ... other customer fields
      }
    ],
    "pagination": {
      "current_page": 1,
      "last_page": 1,
      "per_page": 15,
      "total": 1,
      "from": 1,
      "to": 1
    }
  }
}
```

### Updated Customer Creation (POST /customers)
Now accepts `plan_id` instead of the old `plan` enum:

#### Request Body
```json
{
  "name": "John Doe",
  "email": "john@example.com",
  "plan_id": 1,
  "monthly_fee": 4500.00,
  "mobile_number": "+1234567890",
  "address": "123 Main St"
}
```

### Updated Customer Update (PUT /customers/{id})
Now accepts `plan_id` for updating customer plans:

#### Request Body
```json
{
  "name": "John Smith",
  "plan_id": 2,
  "monthly_fee": 3000.00
}
```

---

## Customer Plan Management Frontend Integration Tips

### 1. Plan Selection Component
```javascript
const PlanSelector = ({ customerId, currentPlanId, onPlanChange }) => {
  const [plans, setPlans] = useState([]);
  const [loading, setLoading] = useState(false);

  const loadPlans = async () => {
    try {
      const data = await getPlans({ is_active: true });
      setPlans(data.data);
    } catch (error) {
      console.error('Error loading plans:', error);
    }
  };

  const handlePlanChange = async (newPlanId) => {
    setLoading(true);
    try {
      await updateCustomerPlan(customerId, newPlanId);
      onPlanChange(newPlanId);
    } catch (error) {
      console.error('Error updating plan:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPlans();
  }, []);

  return (
    <select 
      value={currentPlanId || ''} 
      onChange={(e) => handlePlanChange(parseInt(e.target.value))}
      disabled={loading}
    >
      <option value="">Select Plan</option>
      {plans.map(plan => (
        <option key={plan.id} value={plan.id}>
          {plan.name} - ${plan.monthly_fee}/month
        </option>
      ))}
    </select>
  );
};
```

### 2. Customer Plan Display Component
```javascript
const CustomerPlanCard = ({ customerId }) => {
  const [planData, setPlanData] = useState(null);
  const [loading, setLoading] = useState(true);

  const loadPlanData = async () => {
    try {
      const data = await getCustomerPlan(customerId);
      setPlanData(data);
    } catch (error) {
      console.error('Error loading plan:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadPlanData();
  }, [customerId]);

  if (loading) return <div>Loading plan...</div>;
  if (!planData) return <div>No plan assigned</div>;

  return (
    <div className="plan-card">
      <h3>{planData.plan.name}</h3>
      <p>{planData.plan.description}</p>
      <div className="plan-fees">
        <div>Monthly Fee: ${planData.plan.monthly_fee}</div>
        <div>Registration Fee: ${planData.registration_fee}</div>
      </div>
    </div>
  );
};
```

### 3. Customer List with Plan Filter
```javascript
const CustomerListWithPlans = () => {
  const [customers, setCustomers] = useState([]);
  const [plans, setPlans] = useState([]);
  const [filters, setFilters] = useState({});

  const loadCustomers = async () => {
    try {
      const data = await getCustomers(filters);
      setCustomers(data.customers);
    } catch (error) {
      console.error('Error loading customers:', error);
    }
  };

  const loadPlans = async () => {
    try {
      const data = await getPlans({ is_active: true });
      setPlans(data.data);
    } catch (error) {
      console.error('Error loading plans:', error);
    }
  };

  useEffect(() => {
    loadCustomers();
    loadPlans();
  }, [filters]);

  return (
    <div>
      {/* Plan filter dropdown */}
      <select 
        value={filters.plan_id || ''} 
        onChange={(e) => setFilters({...filters, plan_id: e.target.value || undefined})}
      >
        <option value="">All Plans</option>
        {plans.map(plan => (
          <option key={plan.id} value={plan.id}>{plan.name}</option>
        ))}
      </select>

      {/* Customer list */}
      {customers.map(customer => (
        <div key={customer.id} className="customer-card">
          <h3>{customer.name}</h3>
          <p>Plan: {customer.plan_display}</p>
          <p>Monthly Fee: ${customer.monthly_fee}</p>
          <p>Registration Fee: ${customer.registration_fee}</p>
        </div>
      ))}
    </div>
  );
};
```

---

## Fee Tracking and Submission System

### 28. Submit Fee Payment
**POST** `/fee-submissions/submit`

Submits a fee payment (monthly fee, registration fee, etc.) and automatically generates an invoice.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "customer_id": 1,
  "fee_type": "monthly_fee",
  "amount": 4500.00,
  "payment_date": "2025-10-17",
  "payment_method": "cash",
  "notes": "Monthly fee payment"
}
```

#### Fee Types
- `monthly_fee` - Monthly subscription fee
- `registration_fee` - One-time registration fee
- `late_fee` - Late payment penalty
- `other` - Other fee types

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Fee submitted successfully",
  "data": {
    "fee_submission": {
      "id": 1,
      "customer_id": 1,
      "invoice_id": 1,
      "fee_type": "monthly_fee",
      "amount": "4500.00",
      "payment_date": "2025-10-17",
      "payment_method": "cash",
      "notes": "Monthly fee payment",
      "fee_type_display": "Monthly Fee",
      "payment_method_display": "Cash",
      "days_ago": 0,
      "created_at": "2025-10-17T18:30:00.000000Z",
      "updated_at": "2025-10-17T18:30:00.000000Z"
    },
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "last_payment_date": "2025-10-17",
      "next_due_date": "2025-11-17",
      "subscription_status": "paid",
      "overdue_days": 0,
      "fee_status": "PAID 0 days ago",
      "days_since_payment": 0,
      "days_until_due": 31,
      "is_fee_overdue": false
    },
    "invoice": {
      "id": 1,
      "invoice_number": "INV-20251017-0001",
      "customer_id": 1,
      "subtotal": "4500.00",
      "total_amount": "4500.00",
      "payment_status": "paid"
    }
  }
}
```

---

### 29. Get Customer Fee Status
**GET** `/customers/{id}/fee-status`

Retrieves comprehensive fee status information for a customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "email": "asim@example.com",
      "plan_id": 1,
      "plan_display": "Premium",
      "monthly_fee": "4500.00",
      "registration_fee": "2000.00",
      "last_payment_date": "2025-10-17",
      "next_due_date": "2025-11-17",
      "subscription_status": "paid",
      "overdue_days": 0
    },
    "fee_status": "PAID 0 days ago",
    "days_since_payment": 0,
    "days_until_due": 31,
    "is_overdue": false,
    "last_payment_date": "2025-10-17",
    "next_due_date": "2025-11-17",
    "monthly_fee": "4500.00",
    "registration_fee": "2000.00",
    "recent_fee_submissions": [
      {
        "id": 1,
        "fee_type": "monthly_fee",
        "amount": "4500.00",
        "payment_date": "2025-10-17",
        "payment_method": "cash",
        "fee_type_display": "Monthly Fee",
        "payment_method_display": "Cash",
        "days_ago": 0
      }
    ]
  }
}
```

---

### 30. Get Customer Fee History
**GET** `/customers/{id}/fee-history`

Retrieves the complete fee payment history for a customer.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `fee_type` (optional): Filter by fee type (`monthly_fee`, `registration_fee`, `late_fee`, `other`)
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `sort_by` (optional): Sort field (default: `payment_date`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer": {
      "id": 1,
      "name": "Asim Mahmood",
      "email": "asim@example.com"
    },
    "fee_submissions": {
      "current_page": 1,
      "data": [
        {
          "id": 1,
          "customer_id": 1,
          "invoice_id": 1,
          "fee_type": "monthly_fee",
          "amount": "4500.00",
          "payment_date": "2025-10-17",
          "payment_method": "cash",
          "notes": "Monthly fee payment",
          "fee_type_display": "Monthly Fee",
          "payment_method_display": "Cash",
          "days_ago": 0,
          "created_at": "2025-10-17T18:30:00.000000Z"
        }
      ],
      "first_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/1/fee-history?page=1",
      "from": 1,
      "last_page": 1,
      "last_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/1/fee-history?page=1",
      "links": [],
      "next_page_url": null,
      "path": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers/1/fee-history",
      "per_page": 15,
      "prev_page_url": null,
      "to": 1,
      "total": 1
    }
  }
}
```

---

### 31. Get Fee Submission Statistics
**GET** `/fee-submissions-statistics`

Retrieves comprehensive statistics about fee submissions.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_fee_submissions": 150,
      "total_amount_collected": "675000.00",
      "monthly_fees_collected": "450000.00",
      "registration_fees_collected": "200000.00",
      "today_collections": "22500.00",
      "this_month_collections": "180000.00"
    }
  }
}
```

---

## Updated Customer APIs with Fee Tracking

### Enhanced Customer List (GET /customers)
Now includes fee status information and recent invoices:

#### Response Example
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "Asim Mahmood",
        "email": "asim@example.com",
        "plan_id": 1,
        "plan_display": "Premium",
        "monthly_fee": "4500.00",
        "registration_fee": "2000.00",
        "last_payment_date": "2025-10-17",
        "next_due_date": "2025-11-17",
        "subscription_status": "paid",
        "overdue_days": 0,
        "fee_status": "PAID 0 days ago",
        "days_since_payment": 0,
        "days_until_due": 31,
        "is_fee_overdue": false,
        "plan_model": {
          "id": 1,
          "name": "Premium",
          "monthly_fee": "4500.00",
          "registration_fee": "2000.00"
        },
        "fee_submissions": [
          {
            "id": 1,
            "fee_type": "monthly_fee",
            "amount": "4500.00",
            "payment_date": "2025-10-17",
            "fee_type_display": "Monthly Fee",
            "days_ago": 0
          }
        ],
        "invoices": [
          {
            "id": 12,
            "invoice_number": "INV-20251017-0012",
            "total_amount": "2000.00",
            "payment_status": "paid",
            "payment_method": "cash",
            "created_at": "2025-10-17T18:30:00.000000Z"
          }
        ]
      }
    ]
  }
}
```

---

## Fee Tracking Frontend Integration Examples

### 1. Fee Status Display Component
```javascript
const FeeStatusCard = ({ customerId }) => {
  const [feeStatus, setFeeStatus] = useState(null);
  const [loading, setLoading] = useState(true);

  const loadFeeStatus = async () => {
    try {
      const response = await fetch(`/api/customers/${customerId}/fee-status`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      setFeeStatus(data.data);
    } catch (error) {
      console.error('Error loading fee status:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadFeeStatus();
  }, [customerId]);

  if (loading) return <div>Loading fee status...</div>;
  if (!feeStatus) return <div>No fee status available</div>;

  return (
    <div className="fee-status-card">
      <h3>Fee Status</h3>
      <div className={`status ${feeStatus.is_overdue ? 'overdue' : 'paid'}`}>
        {feeStatus.fee_status}
      </div>
      <div className="details">
        <p>Last Payment: {feeStatus.last_payment_date}</p>
        <p>Next Due: {feeStatus.next_due_date}</p>
        <p>Monthly Fee: ${feeStatus.monthly_fee}</p>
        <p>Registration Fee: ${feeStatus.registration_fee}</p>
      </div>
    </div>
  );
};
```

### 2. Fee Submission Form
```javascript
const FeeSubmissionForm = ({ customerId, onFeeSubmitted }) => {
  const [formData, setFormData] = useState({
    fee_type: 'monthly_fee',
    amount: '',
    payment_method: 'cash',
    notes: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/fee-submissions/submit', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          customer_id: customerId,
          ...formData
        })
      });
      const data = await response.json();
      if (data.success) {
        onFeeSubmitted(data.data);
        setFormData({ fee_type: 'monthly_fee', amount: '', payment_method: 'cash', notes: '' });
      }
    } catch (error) {
      console.error('Error submitting fee:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <select 
        value={formData.fee_type} 
        onChange={(e) => setFormData({...formData, fee_type: e.target.value})}
      >
        <option value="monthly_fee">Monthly Fee</option>
        <option value="registration_fee">Registration Fee</option>
        <option value="late_fee">Late Fee</option>
        <option value="other">Other</option>
      </select>
      
      <input
        type="number"
        placeholder="Amount"
        value={formData.amount}
        onChange={(e) => setFormData({...formData, amount: e.target.value})}
        required
      />
      
      <select 
        value={formData.payment_method} 
        onChange={(e) => setFormData({...formData, payment_method: e.target.value})}
      >
        <option value="cash">Cash</option>
        <option value="card">Card</option>
        <option value="bank_transfer">Bank Transfer</option>
        <option value="digital_wallet">Digital Wallet</option>
      </select>
      
      <textarea
        placeholder="Notes (optional)"
        value={formData.notes}
        onChange={(e) => setFormData({...formData, notes: e.target.value})}
      />
      
      <button type="submit">Submit Fee</button>
    </form>
  );
};
```

### 3. Fee History Table
```javascript
const FeeHistoryTable = ({ customerId }) => {
  const [feeHistory, setFeeHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  const loadFeeHistory = async () => {
    try {
      const response = await fetch(`/api/customers/${customerId}/fee-history`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      setFeeHistory(data.data.fee_submissions.data);
    } catch (error) {
      console.error('Error loading fee history:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadFeeHistory();
  }, [customerId]);

  return (
    <div className="fee-history-table">
      <h3>Fee Payment History</h3>
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Method</th>
            <th>Days Ago</th>
          </tr>
        </thead>
        <tbody>
          {feeHistory.map(fee => (
            <tr key={fee.id}>
              <td>{fee.payment_date}</td>
              <td>{fee.fee_type_display}</td>
              <td>${fee.amount}</td>
              <td>{fee.payment_method_display}</td>
              <td>{fee.days_ago} days ago</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
```

---

---

## Product/Inventory Management Endpoints

All Product endpoints require authentication and the `staff_or_admin` middleware.

### 32. Get All Products
**GET** `/products`

Retrieves a paginated list of products with filtering and sorting options.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `category` (optional): Filter by category
- `supplier` (optional): Filter by supplier name (partial match)
- `stock_status` (optional): Filter by stock status (`low`, `out`, `in_stock`)
- `is_active` (optional): Filter by active status (`true`, `false`)
- `search` (optional): Search by name, brand, or supplier
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 1,
        "name": "Whey Protein Isolate",
        "description": "Premium quality whey protein",
        "category": "Supplements",
        "brand": "Optimum Nutrition",
        "flavor": "Chocolate",
        "size": "2kg",
        "protein_per_serving": "25g",
        "servings": "60",
        "type": "Protein Powder",
        "image_url": "https://example.com/product.jpg",
        "stock": 45,
        "cost_price": "3500.00",
        "selling_price": "4500.00",
        "supplier": "Health Supplements Ltd",
        "supplier_contact": "+92 321 1234567",
        "supplier_email": "supplier@example.com",
        "supplier_address": "Karachi, Pakistan",
        "is_active": true,
        "profit": "1000.00",
        "profit_percentage": "28.57",
        "stock_status": "high",
        "stock_status_display": "High",
        "created_at": "2025-10-17T10:30:00.000000Z",
        "updated_at": "2025-10-17T10:30:00.000000Z"
      }
    ],
    "first_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products?page=1",
    "from": 1,
    "last_page": 1,
    "last_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products?page=1",
    "links": [],
    "next_page_url": null,
    "path": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products",
    "per_page": 15,
    "prev_page_url": null,
    "to": 1,
    "total": 1
  }
}
```

#### Frontend Integration Example
```javascript
const getProducts = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage examples:
// getProducts({ category: 'Supplements', stock_status: 'low' })
// getProducts({ search: 'protein', sort_by: 'name', sort_order: 'asc' })
// getProducts({ supplier: 'Health Supplements', per_page: 20 })
```

---

### 33. Create Product
**POST** `/products`

Creates a new product in the inventory.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "name": "Whey Protein Isolate",
  "description": "Premium quality whey protein",
  "category": "Supplements",
  "brand": "Optimum Nutrition",
  "flavor": "Chocolate",
  "size": "2kg",
  "protein_per_serving": "25g",
  "servings": "60",
  "type": "Protein Powder",
  "image_url": "https://example.com/product.jpg",
  "stock": 50,
  "cost_price": 3500.00,
  "selling_price": 4500.00,
  "supplier": "Health Supplements Ltd",
  "supplier_contact": "+92 321 1234567",
  "supplier_email": "supplier@example.com",
  "supplier_address": "Karachi, Pakistan",
  "is_active": true
}
```

#### Field Requirements
- `name` - Required, max 255 characters
- `description` - Optional
- `category` - Required, max 255 characters
- `brand` - Optional, max 255 characters
- `flavor` - Optional, max 255 characters
- `size` - Optional, max 255 characters
- `protein_per_serving` - Optional, max 255 characters
- `servings` - Optional, max 255 characters
- `type` - Optional, max 255 characters
- `image_url` - Optional, must be valid URL
- `stock` - Required, integer, minimum 0
- `cost_price` - Required, numeric, minimum 0
- `selling_price` - Required, numeric, minimum 0
- `supplier` - Required, max 255 characters
- `supplier_contact` - Optional, max 255 characters
- `supplier_email` - Optional, valid email, max 255 characters
- `supplier_address` - Optional
- `is_active` - Optional, boolean (defaults to true)

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Product created successfully",
  "data": {
    "id": 1,
    "name": "Whey Protein Isolate",
    "description": "Premium quality whey protein",
    "category": "Supplements",
    "brand": "Optimum Nutrition",
    "stock": 50,
    "cost_price": "3500.00",
    "selling_price": "4500.00",
    "profit": "1000.00",
    "profit_percentage": "28.57",
    "stock_status": "high",
    "stock_status_display": "High",
    "is_active": true,
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T10:30:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const createProduct = async (productData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(productData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 34. Get Product Details
**GET** `/products/{id}`

Retrieves detailed information about a specific product, including recent transactions.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Whey Protein Isolate",
    "description": "Premium quality whey protein",
    "category": "Supplements",
    "brand": "Optimum Nutrition",
    "flavor": "Chocolate",
    "size": "2kg",
    "stock": 45,
    "cost_price": "3500.00",
    "selling_price": "4500.00",
    "profit": "1000.00",
    "profit_percentage": "28.57",
    "stock_status": "high",
    "stock_status_display": "High",
    "supplier": "Health Supplements Ltd",
    "supplier_contact": "+92 321 1234567",
    "supplier_email": "supplier@example.com",
    "is_active": true,
    "transactions": [
      {
        "id": 1,
        "transaction_type": "sale",
        "quantity": 2,
        "unit_price": "4500.00",
        "total_amount": "9000.00",
        "customer": {
          "id": 1,
          "name": "John Doe",
          "email": "john@example.com"
        },
        "created_at": "2025-10-17T10:30:00.000000Z"
      }
    ],
    "created_at": "2025-10-17T10:30:00.000000Z",
    "updated_at": "2025-10-17T10:30:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const getProduct = async (productId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products/${productId}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 35. Update Product
**PUT** `/products/{id}`

Updates an existing product's information. Partial updates are supported.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body (all fields optional)
```json
{
  "name": "Whey Protein Isolate Pro",
  "stock": 60,
  "cost_price": 3200.00,
  "selling_price": 4200.00,
  "is_active": true
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Product updated successfully",
  "data": {
    "id": 1,
    "name": "Whey Protein Isolate Pro",
    "stock": 60,
    "cost_price": "3200.00",
    "selling_price": "4200.00",
    "profit": "1000.00",
    "profit_percentage": "31.25",
    "stock_status": "high",
    "is_active": true,
    "updated_at": "2025-10-17T11:00:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const updateProduct = async (productId, updateData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products/${productId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(updateData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 36. Delete Product
**DELETE** `/products/{id}`

Deletes a product from the inventory.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Product deleted successfully"
}
```

#### Frontend Integration Example
```javascript
const deleteProduct = async (productId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products/${productId}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 37. Restock Product
**POST** `/products/{id}/restock`

Adds stock quantity to an existing product.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "quantity": 20
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Product restocked successfully",
  "data": {
    "id": 1,
    "name": "Whey Protein Isolate",
    "stock": 65,
    "stock_status": "high",
    "stock_status_display": "High",
    "updated_at": "2025-10-17T11:30:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const restockProduct = async (productId, quantity) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products/${productId}/restock`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ quantity })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 38. Get Product Statistics
**GET** `/products/statistics`

Retrieves comprehensive statistics about the inventory.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_products": 150,
      "active_products": 135,
      "low_stock_products": 12,
      "out_of_stock_products": 3,
      "total_inventory_value": "525000.00",
      "total_sales_value": "675000.00"
    }
  }
}
```

#### Statistics Breakdown
- `total_products` - Total number of products in inventory
- `active_products` - Number of active products (is_active = true)
- `low_stock_products` - Products with stock ≤ 5 units
- `out_of_stock_products` - Products with stock ≤ 0 units
- `total_inventory_value` - Sum of (stock × cost_price) for all products
- `total_sales_value` - Sum of (stock × selling_price) for all products

#### Frontend Integration Example
```javascript
const getProductStatistics = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products/statistics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.statistics;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Product Stock Status Indicators

The system automatically calculates stock status based on available quantity:

### Stock Status Levels
- **Low Stock** (🔴 Red): stock ≤ 5 units
- **Medium Stock** (🟡 Yellow): 6 ≤ stock ≤ 20 units
- **High Stock** (🟢 Green): stock > 20 units
- **Out of Stock** (⚫ Black): stock ≤ 0 units

### Automatic Stock Management

Stock is automatically updated when:
1. **Products are sold** - Stock decreases by quantity sold
2. **Products are restocked** - Stock increases by quantity added
3. **Invoices are created** - Each transaction in the invoice reduces stock
4. **Transactions are created** - Sale transactions reduce stock, restock transactions increase it

### Stock Validation

The system prevents overselling by:
- Validating stock availability before creating sales transactions
- Returning error if requested quantity exceeds available stock
- Providing current available stock in error messages

---

## Inventory Management Frontend Integration Tips

### 1. Product List Component with Stock Indicators
```javascript
const ProductList = () => {
  const [products, setProducts] = useState([]);
  const [filters, setFilters] = useState({});
  const [stats, setStats] = useState(null);

  const loadProducts = async () => {
    try {
      const data = await getProducts(filters);
      setProducts(data.data);
    } catch (error) {
      console.error('Error loading products:', error);
    }
  };

  const loadStatistics = async () => {
    try {
      const statistics = await getProductStatistics();
      setStats(statistics);
    } catch (error) {
      console.error('Error loading statistics:', error);
    }
  };

  useEffect(() => {
    loadProducts();
    loadStatistics();
  }, [filters]);

  const getStockBadgeColor = (status) => {
    switch(status) {
      case 'low': return 'bg-red-500';
      case 'medium': return 'bg-yellow-500';
      case 'high': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div>
      {/* Statistics Dashboard */}
      {stats && (
        <div className="grid grid-cols-4 gap-4 mb-6">
          <div className="stat-card">
            <h3>Total Products</h3>
            <p className="text-3xl">{stats.total_products}</p>
          </div>
          <div className="stat-card">
            <h3>Low Stock Alert</h3>
            <p className="text-3xl text-red-500">{stats.low_stock_products}</p>
          </div>
          <div className="stat-card">
            <h3>Out of Stock</h3>
            <p className="text-3xl text-gray-700">{stats.out_of_stock_products}</p>
          </div>
          <div className="stat-card">
            <h3>Inventory Value</h3>
            <p className="text-3xl">${stats.total_inventory_value}</p>
          </div>
        </div>
      )}

      {/* Filter Controls */}
      <div className="filters mb-4">
        <select 
          value={filters.stock_status || ''} 
          onChange={(e) => setFilters({...filters, stock_status: e.target.value})}
        >
          <option value="">All Stock Levels</option>
          <option value="low">Low Stock</option>
          <option value="out">Out of Stock</option>
          <option value="in_stock">In Stock</option>
        </select>

        <input
          type="text"
          placeholder="Search products..."
          value={filters.search || ''}
          onChange={(e) => setFilters({...filters, search: e.target.value})}
        />
      </div>

      {/* Product Grid */}
      <div className="product-grid">
        {products.map(product => (
          <div key={product.id} className="product-card">
            <div className={`stock-badge ${getStockBadgeColor(product.stock_status)}`}>
              {product.stock_status_display}
            </div>
            
            <h3>{product.name}</h3>
            <p>{product.brand} - {product.category}</p>
            
            <div className="stock-info">
              <span>Stock: {product.stock} units</span>
              {product.stock <= 5 && (
                <span className="text-red-500">⚠️ Low Stock!</span>
              )}
            </div>
            
            <div className="price-info">
              <span>Cost: ${product.cost_price}</span>
              <span>Sell: ${product.selling_price}</span>
              <span className="profit">Profit: ${product.profit} ({product.profit_percentage}%)</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
```

### 2. Product Form Component
```javascript
const ProductForm = ({ productId = null, onSaved }) => {
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    brand: '',
    stock: 0,
    cost_price: 0,
    selling_price: 0,
    supplier: '',
    supplier_contact: '',
    supplier_email: '',
    is_active: true
  });

  const loadProduct = async () => {
    if (productId) {
      try {
        const product = await getProduct(productId);
        setFormData(product);
      } catch (error) {
        console.error('Error loading product:', error);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      let result;
      if (productId) {
        result = await updateProduct(productId, formData);
      } else {
        result = await createProduct(formData);
      }
      onSaved(result);
    } catch (error) {
      console.error('Error saving product:', error);
    }
  };

  useEffect(() => {
    loadProduct();
  }, [productId]);

  const calculateProfit = () => {
    const profit = formData.selling_price - formData.cost_price;
    const percentage = formData.cost_price > 0 
      ? ((profit / formData.cost_price) * 100).toFixed(2)
      : 0;
    return { profit, percentage };
  };

  const { profit, percentage } = calculateProfit();

  return (
    <form onSubmit={handleSubmit} className="product-form">
      <input
        type="text"
        placeholder="Product Name"
        value={formData.name}
        onChange={(e) => setFormData({...formData, name: e.target.value})}
        required
      />

      <input
        type="text"
        placeholder="Category"
        value={formData.category}
        onChange={(e) => setFormData({...formData, category: e.target.value})}
        required
      />

      <input
        type="text"
        placeholder="Brand"
        value={formData.brand}
        onChange={(e) => setFormData({...formData, brand: e.target.value})}
      />

      <input
        type="number"
        placeholder="Stock Quantity"
        value={formData.stock}
        onChange={(e) => setFormData({...formData, stock: parseInt(e.target.value)})}
        required
        min="0"
      />

      <input
        type="number"
        placeholder="Cost Price"
        value={formData.cost_price}
        onChange={(e) => setFormData({...formData, cost_price: parseFloat(e.target.value)})}
        required
        min="0"
        step="0.01"
      />

      <input
        type="number"
        placeholder="Selling Price"
        value={formData.selling_price}
        onChange={(e) => setFormData({...formData, selling_price: parseFloat(e.target.value)})}
        required
        min="0"
        step="0.01"
      />

      {/* Profit Display */}
      <div className="profit-info">
        <span>Profit: ${profit.toFixed(2)}</span>
        <span>Margin: {percentage}%</span>
      </div>

      <input
        type="text"
        placeholder="Supplier Name"
        value={formData.supplier}
        onChange={(e) => setFormData({...formData, supplier: e.target.value})}
        required
      />

      <input
        type="text"
        placeholder="Supplier Contact"
        value={formData.supplier_contact}
        onChange={(e) => setFormData({...formData, supplier_contact: e.target.value})}
      />

      <input
        type="email"
        placeholder="Supplier Email"
        value={formData.supplier_email}
        onChange={(e) => setFormData({...formData, supplier_email: e.target.value})}
      />

      <label>
        <input
          type="checkbox"
          checked={formData.is_active}
          onChange={(e) => setFormData({...formData, is_active: e.target.checked})}
        />
        Active Product
      </label>

      <button type="submit">
        {productId ? 'Update Product' : 'Create Product'}
      </button>
    </form>
  );
};
```

### 3. Restock Component
```javascript
const RestockModal = ({ product, onRestocked }) => {
  const [quantity, setQuantity] = useState(0);
  const [loading, setLoading] = useState(false);

  const handleRestock = async () => {
    setLoading(true);
    try {
      const result = await restockProduct(product.id, quantity);
      onRestocked(result);
      setQuantity(0);
    } catch (error) {
      console.error('Error restocking:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="restock-modal">
      <h3>Restock: {product.name}</h3>
      <p>Current Stock: {product.stock} units</p>
      
      <input
        type="number"
        placeholder="Quantity to add"
        value={quantity}
        onChange={(e) => setQuantity(parseInt(e.target.value))}
        min="1"
      />
      
      <p>New Stock: {product.stock + quantity} units</p>
      
      <button onClick={handleRestock} disabled={loading || quantity <= 0}>
        {loading ? 'Restocking...' : 'Add Stock'}
      </button>
    </div>
  );
};
```

### 4. Low Stock Alert Component
```javascript
const LowStockAlert = () => {
  const [lowStockProducts, setLowStockProducts] = useState([]);

  const loadLowStockProducts = async () => {
    try {
      const data = await getProducts({ stock_status: 'low' });
      setLowStockProducts(data.data);
    } catch (error) {
      console.error('Error loading low stock products:', error);
    }
  };

  useEffect(() => {
    loadLowStockProducts();
    // Refresh every 5 minutes
    const interval = setInterval(loadLowStockProducts, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  if (lowStockProducts.length === 0) return null;

  return (
    <div className="low-stock-alert bg-red-100 border-red-500 p-4 mb-4">
      <h3 className="text-red-700">⚠️ Low Stock Alert!</h3>
      <p>{lowStockProducts.length} product(s) are running low on stock:</p>
      <ul>
        {lowStockProducts.map(product => (
          <li key={product.id}>
            <strong>{product.name}</strong> - Only {product.stock} units left
            <button onClick={() => openRestockModal(product)}>
              Restock Now
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};
```

### 5. Product Sales Integration
```javascript
// When creating a sale, check stock availability
const createSale = async (productId, quantity) => {
  try {
    // First, get product to check stock
    const product = await getProduct(productId);
    
    if (product.stock < quantity) {
      alert(`Insufficient stock! Only ${product.stock} units available.`);
      return false;
    }
    
    // Proceed with sale (via TransactionController or InvoiceController)
    // Stock will be automatically reduced
    // ...
    
    return true;
  } catch (error) {
    console.error('Error creating sale:', error);
    return false;
  }
};
```

---

## Point of Sale (POS) System Endpoints

The POS system allows cashiers to sell products to customers, create invoices, and process payments. It integrates with the inventory system for stock management and customer system for transaction history.

### 39. Create POS Sale (Multi-Product Invoice)
**POST** `/invoices`

Creates a complete POS sale with multiple products, generates an invoice, and processes payment.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "customer_id": 1,
  "transactions": [
    {
      "product_id": 1,
      "quantity": 2,
      "unit_price": 5500.00
    },
    {
      "product_id": 3,
      "quantity": 1,
      "unit_price": 3200.00
    }
  ],
  "tax_amount": 1230.00,
  "discount_amount": 500.00,
  "payment_method": "cash",
  "notes": "POS sale - Customer purchase"
}
```

#### Field Requirements
- `customer_id` - Optional (null for guest sales)
- `transactions` - Required array of products being sold
  - `product_id` - Required, must exist in products table
  - `quantity` - Required, minimum 1
  - `unit_price` - Required, numeric, minimum 0
- `tax_amount` - Optional, numeric, minimum 0 (default: 0)
- `discount_amount` - Optional, numeric, minimum 0 (default: 0)
- `payment_method` - Optional (`cash`, `card`, `bank_transfer`, `digital_wallet` - default: `cash`)
- `notes` - Optional, string
- `due_date` - Optional, date (for credit sales)

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Invoice created successfully",
  "data": {
    "invoice": {
      "id": 15,
      "invoice_number": "INV-20251017-0015",
      "customer_id": 1,
      "subtotal": "14200.00",
      "tax_amount": "1230.00",
      "discount_amount": "500.00",
      "total_amount": "14930.00",
      "payment_status": "paid",
      "payment_method": "cash",
      "notes": "POS sale - Customer purchase",
      "due_date": null,
      "created_at": "2025-10-17T18:30:00.000000Z",
      "updated_at": "2025-10-17T18:30:00.000000Z"
    },
    "transactions": [
      {
        "id": 25,
        "customer_id": 1,
        "product_id": 1,
        "invoice_id": 15,
        "quantity": 2,
        "unit_price": "5500.00",
        "total_amount": "11000.00",
        "transaction_type": "sale",
        "payment_method": "cash",
        "product": {
          "id": 1,
          "name": "BSN N.O.-XPLODE Pre-Workout",
          "stock": 6
        }
      },
      {
        "id": 26,
        "customer_id": 1,
        "product_id": 3,
        "invoice_id": 15,
        "quantity": 1,
        "unit_price": "3200.00",
        "total_amount": "3200.00",
        "transaction_type": "sale",
        "payment_method": "cash",
        "product": {
          "id": 3,
          "name": "MuscleTech Creatine Monohydrate",
          "stock": 44
        }
      }
    ],
    "customer": {
      "id": 1,
      "name": "Alex Martinez",
      "total_spent": "25430.00",
      "total_orders": 8,
      "total_items_purchased": 12
    }
  }
}
```

#### Frontend Integration Example
```javascript
const processPOSSale = async (cartItems, customerId, paymentMethod, discount = 0, tax = 0) => {
  const token = localStorage.getItem('auth_token');
  
  // Prepare transactions array
  const transactions = cartItems.map(item => ({
    product_id: item.productId,
    quantity: item.quantity,
    unit_price: item.price
  }));
  
  const requestData = {
    customer_id: customerId, // null for guest sales
    transactions: transactions,
    tax_amount: tax,
    discount_amount: discount,
    payment_method: paymentMethod,
    notes: `POS sale - ${customerId ? 'Customer purchase' : 'Guest sale'}`
  };
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(requestData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 40. Get Customer List for POS
**GET** `/customers`

Retrieves customers for POS customer selection (same endpoint as customer management, but used differently in POS context).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters for POS
- `search` (optional): Search by name, email, or mobile number
- `per_page` (optional): Items per page (default: `15`)
- `sort_by` (optional): Sort field (default: `name`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `asc`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customers": [
      {
        "id": 1,
        "name": "Alex Martinez",
        "email": "alex@example.com",
        "mobile_number": "+92 321 2345678",
        "total_spent": "15000.00",
        "total_orders": 5,
        "last_purchase_date": "2025-10-15"
      },
      {
        "id": 2,
        "name": "Sarah Johnson",
        "email": "sarah@example.com",
        "mobile_number": "+92 300 1234567",
        "total_spent": "8500.00",
        "total_orders": 3,
        "last_purchase_date": "2025-10-12"
      }
    ],
    "pagination": {
      "current_page": 1,
      "last_page": 1,
      "per_page": 15,
      "total": 2,
      "from": 1,
      "to": 2
    }
  }
}
```

#### Frontend Integration Example
```javascript
const searchCustomers = async (searchTerm) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers?search=${searchTerm}&per_page=10`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.customers;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 41. Get Product List for POS
**GET** `/products`

Retrieves products for POS product selection (same endpoint as inventory management).

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters for POS
- `is_active` (optional): Filter by active status (`true` - default for POS)
- `stock_status` (optional): Filter by stock status (`in_stock` - default for POS)
- `search` (optional): Search by name, brand, or category
- `per_page` (optional): Items per page (default: `50` for POS)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 1,
        "name": "BSN N.O.-XPLODE Pre-Workout",
        "category": "Pre-Workout",
        "brand": "BSN",
        "stock": 8,
        "selling_price": "5500.00",
        "stock_status": "low",
        "stock_status_display": "Low",
        "image_url": "https://example.com/product.jpg"
      },
      {
        "id": 3,
        "name": "MuscleTech Creatine Monohydrate",
        "category": "Creatine",
        "brand": "MuscleTech",
        "stock": 45,
        "selling_price": "3200.00",
        "stock_status": "high",
        "stock_status_display": "High",
        "image_url": "https://example.com/product.jpg"
      }
    ]
  }
}
```

#### Frontend Integration Example
```javascript
const getProductsForPOS = async (searchTerm = '') => {
  const token = localStorage.getItem('auth_token');
  
  const queryParams = new URLSearchParams({
    is_active: 'true',
    stock_status: 'in_stock',
    search: searchTerm,
    per_page: '50'
  });
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/products?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 42. Get Invoice Details
**GET** `/invoices/{id}`

Retrieves detailed information about a specific invoice created from POS.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "invoice": {
      "id": 15,
      "invoice_number": "INV-20251017-0015",
      "customer_id": 1,
      "subtotal": "14200.00",
      "tax_amount": "1230.00",
      "discount_amount": "500.00",
      "total_amount": "14930.00",
      "payment_status": "paid",
      "payment_method": "cash",
      "notes": "POS sale - Customer purchase",
      "created_at": "2025-10-17T18:30:00.000000Z"
    },
    "customer": {
      "id": 1,
      "name": "Alex Martinez",
      "email": "alex@example.com",
      "mobile_number": "+92 321 2345678"
    },
    "transactions": [
      {
        "id": 25,
        "product_id": 1,
        "quantity": 2,
        "unit_price": "5500.00",
        "total_amount": "11000.00",
        "product": {
          "id": 1,
          "name": "BSN N.O.-XPLODE Pre-Workout",
          "category": "Pre-Workout",
          "brand": "BSN"
        }
      }
    ]
  }
}
```

---

## POS System Features

### Automatic Stock Management
- **Stock Validation**: Checks stock availability before creating transactions
- **Stock Reduction**: Automatically reduces stock when products are sold
- **Stock Alerts**: Shows low stock warnings in product listings

### Customer Integration
- **Existing Customers**: Search and select from customer database
- **Guest Sales**: Process sales without customer registration (customer_id = null)
- **Transaction History**: All sales are recorded in customer transaction history
- **Customer Statistics**: Automatically updates customer spending and order counts

### Invoice Generation
- **Automatic Invoice Numbers**: Generated in format "INV-YYYYMMDD-XXXX"
- **Multi-Product Support**: Single invoice can contain multiple products
- **Tax and Discount Support**: Configurable tax and discount calculations
- **Payment Status Tracking**: Tracks payment method and status

### Payment Processing
- **Multiple Payment Methods**: Cash, Card, Bank Transfer, Digital Wallet
- **Real-time Processing**: Immediate payment confirmation
- **Receipt Generation**: Automatic invoice/receipt creation

---

## POS Frontend Integration Examples

### 1. Complete POS Component
```javascript
const POSSystem = () => {
  const [products, setProducts] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [cart, setCart] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [discount, setDiscount] = useState(0);
  const [tax, setTax] = useState(0);
  const [loading, setLoading] = useState(false);

  // Load products for POS
  const loadProducts = async (searchTerm = '') => {
    try {
      const products = await getProductsForPOS(searchTerm);
      setProducts(products);
    } catch (error) {
      console.error('Error loading products:', error);
    }
  };

  // Search customers
  const searchCustomers = async (searchTerm) => {
    if (searchTerm.length < 2) return;
    try {
      const customers = await searchCustomers(searchTerm);
      setCustomers(customers);
    } catch (error) {
      console.error('Error searching customers:', error);
    }
  };

  // Add product to cart
  const addToCart = (product) => {
    const existingItem = cart.find(item => item.productId === product.id);
    
    if (existingItem) {
      // Increase quantity
      setCart(cart.map(item => 
        item.productId === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      // Add new item
      setCart([...cart, {
        productId: product.id,
        name: product.name,
        price: parseFloat(product.selling_price),
        quantity: 1,
        stock: product.stock
      }]);
    }
  };

  // Update cart item quantity
  const updateCartQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
      return;
    }
    
    setCart(cart.map(item => 
      item.productId === productId 
        ? { ...item, quantity: newQuantity }
        : item
    ));
  };

  // Remove item from cart
  const removeFromCart = (productId) => {
    setCart(cart.filter(item => item.productId !== productId));
  };

  // Calculate totals
  const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const discountAmount = (subtotal * discount) / 100;
  const taxAmount = ((subtotal - discountAmount) * tax) / 100;
  const total = subtotal - discountAmount + taxAmount;

  // Process POS sale
  const processSale = async () => {
    if (cart.length === 0) {
      alert('Cart is empty');
      return;
    }

    setLoading(true);
    try {
      const result = await processPOSSale(
        cart,
        selectedCustomer?.id || null,
        paymentMethod,
        discountAmount,
        taxAmount
      );

      // Clear cart and reset form
      setCart([]);
      setSelectedCustomer(null);
      setDiscount(0);
      setTax(0);
      
      // Show success message or print receipt
      alert(`Sale completed! Invoice: ${result.invoice.invoice_number}`);
      
    } catch (error) {
      console.error('Error processing sale:', error);
      alert('Error processing sale: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadProducts();
  }, []);

  return (
    <div className="pos-system">
      {/* Product Catalog */}
      <div className="product-catalog">
        <h2>Point of Sale</h2>
        
        {/* Search and Filters */}
        <div className="search-filters">
          <input
            type="text"
            placeholder="Search products..."
            onChange={(e) => loadProducts(e.target.value)}
          />
        </div>

        {/* Product Grid */}
        <div className="product-grid">
          {products.map(product => (
            <div 
              key={product.id} 
              className={`product-card ${product.stock_status === 'low' ? 'low-stock' : ''}`}
              onClick={() => addToCart(product)}
            >
              <img src={product.image_url} alt={product.name} />
              <h3>{product.name}</h3>
              <p className="price">PKR {parseFloat(product.selling_price).toLocaleString()}</p>
              <p className={`stock ${product.stock_status}`}>
                {product.stock} In Stock
              </p>
              <p className="category">{product.category} • {product.brand}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Shopping Cart */}
      <div className="shopping-cart">
        <div className="cart-header">
          <h3>Cart ({cart.length} items)</h3>
          <button onClick={() => setCart([])}>Clear</button>
        </div>

        {cart.length === 0 ? (
          <div className="empty-cart">
            <p>Your cart is empty</p>
            <p>Click on products to add them to your cart</p>
          </div>
        ) : (
          <>
            {/* Cart Items */}
            <div className="cart-items">
              {cart.map(item => (
                <div key={item.productId} className="cart-item">
                  <div className="item-info">
                    <h4>{item.name}</h4>
                    <p>PKR {item.price.toLocaleString()}</p>
                  </div>
                  <div className="quantity-controls">
                    <button onClick={() => updateCartQuantity(item.productId, item.quantity - 1)}>
                      -
                    </button>
                    <span>{item.quantity}</span>
                    <button 
                      onClick={() => updateCartQuantity(item.productId, item.quantity + 1)}
                      disabled={item.quantity >= item.stock}
                    >
                      +
                    </button>
                  </div>
                  <button 
                    onClick={() => removeFromCart(item.productId)}
                    className="remove-btn"
                  >
                    🗑️
                  </button>
                </div>
              ))}
            </div>

            {/* Customer Selection */}
            <div className="customer-section">
              <h4>Customer</h4>
              <input
                type="text"
                placeholder="Search customer..."
                onChange={(e) => searchCustomers(e.target.value)}
              />
              
              {selectedCustomer ? (
                <div className="selected-customer">
                  <p><strong>{selectedCustomer.name}</strong></p>
                  <p>{selectedCustomer.mobile_number}</p>
                  <button onClick={() => setSelectedCustomer(null)}>Remove</button>
                </div>
              ) : (
                <div className="guest-sale">
                  <p>Guest Sale</p>
                  {customers.map(customer => (
                    <div 
                      key={customer.id}
                      className="customer-option"
                      onClick={() => setSelectedCustomer(customer)}
                    >
                      <p><strong>{customer.name}</strong></p>
                      <p>{customer.mobile_number}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Discount */}
            <div className="discount-section">
              <h4>Discount (%)</h4>
              <input
                type="number"
                value={discount}
                onChange={(e) => setDiscount(parseFloat(e.target.value) || 0)}
                min="0"
                max="100"
              />
            </div>

            {/* Payment Method */}
            <div className="payment-method">
              <h4>Payment Method</h4>
              <div className="payment-options">
                <button 
                  className={paymentMethod === 'cash' ? 'selected' : ''}
                  onClick={() => setPaymentMethod('cash')}
                >
                  Cash
                </button>
                <button 
                  className={paymentMethod === 'card' ? 'selected' : ''}
                  onClick={() => setPaymentMethod('card')}
                >
                  Card
                </button>
                <button 
                  className={paymentMethod === 'other' ? 'selected' : ''}
                  onClick={() => setPaymentMethod('bank_transfer')}
                >
                  Other
                </button>
              </div>
            </div>

            {/* Order Summary */}
            <div className="order-summary">
              <div className="summary-row">
                <span>Subtotal:</span>
                <span>PKR {subtotal.toLocaleString()}</span>
              </div>
              <div className="summary-row">
                <span>Discount:</span>
                <span>-PKR {discountAmount.toLocaleString()}</span>
              </div>
              <div className="summary-row">
                <span>Tax (15%):</span>
                <span>PKR {taxAmount.toLocaleString()}</span>
              </div>
              <div className="summary-row total">
                <span>Total:</span>
                <span>PKR {total.toLocaleString()}</span>
              </div>
            </div>

            {/* Checkout Button */}
            <button 
              className="checkout-btn"
              onClick={processSale}
              disabled={loading}
            >
              {loading ? 'Processing...' : `Checkout - PKR ${total.toLocaleString()}`}
            </button>
          </>
        )}
      </div>
    </div>
  );
};
```

### 2. POS Product Card Component
```javascript
const POSProductCard = ({ product, onAddToCart }) => {
  const getStockColor = (status) => {
    switch(status) {
      case 'low': return '#ff6b6b';
      case 'medium': return '#ffd93d';
      case 'high': return '#6bcf7f';
      default: return '#6c757d';
    }
  };

  return (
    <div 
      className="pos-product-card"
      onClick={() => onAddToCart(product)}
    >
      <div className="product-image">
        <img src={product.image_url || '/placeholder.jpg'} alt={product.name} />
        {product.stock_status === 'low' && (
          <div className="low-stock-badge">Low Stock</div>
        )}
      </div>
      
      <div className="product-info">
        <h3>{product.name}</h3>
        <p className="price">PKR {parseFloat(product.selling_price).toLocaleString()}</p>
        <p 
          className="stock"
          style={{ color: getStockColor(product.stock_status) }}
        >
          {product.stock} In Stock
        </p>
        <p className="category">{product.category} • {product.brand}</p>
      </div>
    </div>
  );
};
```

### 3. POS Cart Item Component
```javascript
const POSCartItem = ({ item, onUpdateQuantity, onRemove }) => {
  const handleQuantityChange = (newQuantity) => {
    onUpdateQuantity(item.productId, newQuantity);
  };

  return (
    <div className="pos-cart-item">
      <div className="item-details">
        <h4>{item.name}</h4>
        <p>PKR {item.price.toLocaleString()}</p>
      </div>
      
      <div className="quantity-controls">
        <button 
          onClick={() => handleQuantityChange(item.quantity - 1)}
          disabled={item.quantity <= 1}
        >
          -
        </button>
        <input 
          type="number"
          value={item.quantity}
          onChange={(e) => handleQuantityChange(parseInt(e.target.value) || 1)}
          min="1"
          max={item.stock}
        />
        <button 
          onClick={() => handleQuantityChange(item.quantity + 1)}
          disabled={item.quantity >= item.stock}
        >
          +
        </button>
      </div>
      
      <div className="item-total">
        PKR {(item.price * item.quantity).toLocaleString()}
      </div>
      
      <button 
        onClick={() => onRemove(item.productId)}
        className="remove-btn"
      >
        🗑️
      </button>
    </div>
  );
};
```

---

## POS System Integration Checklist

✅ **Product Management**
- [x] Load products for POS with stock status
- [x] Filter active products only
- [x] Show stock levels and low stock warnings
- [x] Real-time stock validation

✅ **Customer Management**
- [x] Search existing customers
- [x] Support guest sales (no customer)
- [x] Link sales to customer transaction history

✅ **Shopping Cart**
- [x] Add/remove products
- [x] Update quantities
- [x] Calculate totals with tax and discount

✅ **Payment Processing**
- [x] Multiple payment methods
- [x] Automatic invoice generation
- [x] Stock reduction on sale
- [x] Customer statistics update

✅ **Invoice Generation**
- [x] Automatic invoice numbers
- [x] Multi-product support
- [x] Tax and discount calculations
- [x] Thermal printer support

---

## Invoice Management CRUD Endpoints

Complete invoice management system with full CRUD operations, customer search, and bulk operations.

### 43. Get All Invoices (Enhanced)
**GET** `/invoices`

Retrieves a paginated list of invoices with advanced filtering and search capabilities.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `search` (optional): Search by invoice number, customer name, email, or mobile number
- `customer_id` (optional): Filter by specific customer ID
- `customer_name` (optional): Filter by customer name (partial match)
- `payment_status` (optional): Filter by payment status (`pending`, `paid`, `overdue`, `cancelled`)
- `payment_method` (optional): Filter by payment method (`cash`, `card`, `bank_transfer`, `digital_wallet`)
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 12,
        "invoice_number": "INV-20251018-0012",
        "customer_id": null,
        "subtotal": "10000.00",
        "tax_amount": "1500.00",
        "discount_amount": "0.00",
        "total_amount": "11500.00",
        "payment_status": "pending",
        "payment_status_display": "Pending",
        "payment_method": "cash",
        "payment_method_display": "Cash",
        "notes": "POS sale - Guest sale",
        "due_date": null,
        "customer": null,
        "transactions": [
          {
            "id": 25,
            "product_id": 1,
            "quantity": 2,
            "unit_price": "5500.00",
            "total_amount": "11000.00",
            "product": {
              "id": 1,
              "name": "BSN N.O.-XPLODE Pre-Workout",
              "category": "Pre-Workout",
              "brand": "BSN"
            }
          }
        ],
        "created_at": "2025-10-18T10:30:00.000000Z",
        "updated_at": "2025-10-18T10:30:00.000000Z"
      }
    ],
    "first_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices?page=1",
    "from": 1,
    "last_page": 1,
    "last_page_url": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices?page=1",
    "links": [],
    "next_page_url": null,
    "path": "https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices",
    "per_page": 15,
    "prev_page_url": null,
    "to": 1,
    "total": 1
  }
}
```

#### Frontend Integration Example
```javascript
const getInvoices = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage examples:
// getInvoices({ search: 'INV-20251018', payment_status: 'pending' })
// getInvoices({ customer_name: 'Alex', payment_method: 'cash' })
// getInvoices({ date_from: '2025-10-01', date_to: '2025-10-31' })
```

---

### 44. Update Invoice
**PUT** `/invoices/{id}`

Updates an existing invoice's information. Partial updates are supported.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body (all fields optional)
```json
{
  "customer_id": 1,
  "tax_amount": 1500.00,
  "discount_amount": 500.00,
  "payment_status": "paid",
  "payment_method": "card",
  "notes": "Updated payment information",
  "due_date": "2025-11-18"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Invoice updated successfully",
  "data": {
    "id": 12,
    "invoice_number": "INV-20251018-0012",
    "customer_id": 1,
    "subtotal": "10000.00",
    "tax_amount": "1500.00",
    "discount_amount": "500.00",
    "total_amount": "11000.00",
    "payment_status": "paid",
    "payment_method": "card",
    "notes": "Updated payment information",
    "customer": {
      "id": 1,
      "name": "Alex Martinez",
      "email": "alex@example.com"
    },
    "transactions": [
      {
        "id": 25,
        "product_id": 1,
        "quantity": 2,
        "unit_price": "5500.00",
        "total_amount": "11000.00",
        "product": {
          "id": 1,
          "name": "BSN N.O.-XPLODE Pre-Workout"
        }
      }
    ],
    "updated_at": "2025-10-18T11:00:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const updateInvoice = async (invoiceId, updateData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices/${invoiceId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(updateData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 45. Delete Invoice
**DELETE** `/invoices/{id}`

Deletes an invoice and restores product stock. This action is irreversible.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Invoice deleted successfully"
}
```

#### Important Notes
- **Stock Restoration**: Product stock will be restored when invoice is deleted
- **Customer Statistics**: Customer spending and order counts will be updated
- **Transactions**: All related transactions will be deleted
- **Irreversible**: This action cannot be undone

#### Frontend Integration Example
```javascript
const deleteInvoice = async (invoiceId) => {
  const token = localStorage.getItem('auth_token');
  
  const confirmed = confirm('Are you sure you want to delete this invoice? This action will restore product stock and cannot be undone.');
  if (!confirmed) return;
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices/${invoiceId}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 46. Get Invoices by Customer Name
**GET** `/invoices-by-customer`

Retrieves all invoices for customers matching the provided name.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `customer_name` (required): Customer name to search for (minimum 2 characters)
- `payment_status` (optional): Filter by payment status
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "customer_name": "Alex",
    "invoices": {
      "current_page": 1,
      "data": [
        {
          "id": 12,
          "invoice_number": "INV-20251018-0012",
          "customer_id": 1,
          "total_amount": "11500.00",
          "payment_status": "paid",
          "payment_method": "cash",
          "customer": {
            "id": 1,
            "name": "Alex Martinez",
            "email": "alex@example.com",
            "mobile_number": "+92 321 2345678"
          },
          "transactions": [
            {
              "id": 25,
              "product_id": 1,
              "quantity": 2,
              "unit_price": "5500.00",
              "total_amount": "11000.00",
              "product": {
                "id": 1,
                "name": "BSN N.O.-XPLODE Pre-Workout"
              }
            }
          ],
          "created_at": "2025-10-18T10:30:00.000000Z"
        }
      ],
      "total": 1
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getInvoicesByCustomerName = async (customerName, filters = {}) => {
  const token = localStorage.getItem('auth_token');
  
  const queryParams = new URLSearchParams({
    customer_name: customerName,
    ...filters
  });
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-by-customer?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 47. Bulk Update Invoice Status
**PUT** `/invoices-bulk-update-status`

Updates payment status for multiple invoices at once.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "invoice_ids": [12, 13, 14, 15],
  "payment_status": "paid",
  "payment_method": "card"
}
```

#### Field Requirements
- `invoice_ids` - Required array of invoice IDs (minimum 1)
- `payment_status` - Required (`pending`, `paid`, `overdue`, `cancelled`)
- `payment_method` - Optional (`cash`, `card`, `bank_transfer`, `digital_wallet`)

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Successfully updated 4 invoices",
  "data": {
    "updated_count": 4,
    "invoice_ids": [12, 13, 14, 15]
  }
}
```

#### Frontend Integration Example
```javascript
const bulkUpdateInvoiceStatus = async (invoiceIds, paymentStatus, paymentMethod = null) => {
  const token = localStorage.getItem('auth_token');
  
  const requestData = {
    invoice_ids: invoiceIds,
    payment_status: paymentStatus
  };
  
  if (paymentMethod) {
    requestData.payment_method = paymentMethod;
  }
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-bulk-update-status', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(requestData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 48. Get Invoice Statistics
**GET** `/invoices-statistics`

Retrieves comprehensive statistics about invoices.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_invoices": 150,
      "total_amount": "675000.00",
      "paid_invoices": 120,
      "pending_invoices": 25,
      "overdue_invoices": 5,
      "today_sales": "22500.00",
      "this_month_sales": "180000.00"
    }
  }
}
```

#### Statistics Breakdown
- `total_invoices` - Total number of invoices
- `total_amount` - Sum of all invoice amounts
- `paid_invoices` - Number of paid invoices
- `pending_invoices` - Number of pending invoices
- `overdue_invoices` - Number of overdue invoices
- `today_sales` - Total sales amount for today
- `this_month_sales` - Total sales amount for current month

#### Frontend Integration Example
```javascript
const getInvoiceStatistics = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-statistics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.statistics;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Invoice Management Features

### Advanced Search and Filtering
- **Search by Invoice Number**: Find invoices by partial invoice number match
- **Search by Customer**: Find invoices by customer name, email, or mobile number
- **Filter by Payment Status**: pending, paid, overdue, cancelled
- **Filter by Payment Method**: cash, card, bank_transfer, digital_wallet
- **Date Range Filtering**: Filter invoices by creation date range
- **Customer Name Filtering**: Find invoices for specific customers

### CRUD Operations
- **Create**: Create new invoices (via POS or manual entry)
- **Read**: View invoice details with customer and transaction information
- **Update**: Modify invoice details, payment status, and customer information
- **Delete**: Remove invoices with automatic stock restoration

### Bulk Operations
- **Bulk Status Update**: Update payment status for multiple invoices at once
- **Bulk Payment Method Update**: Update payment method for multiple invoices

### Automatic Calculations
- **Tax Recalculation**: Automatically recalculates totals when tax amounts change
- **Discount Recalculation**: Automatically recalculates totals when discount amounts change
- **Customer Statistics**: Updates customer spending and order counts automatically

### Stock Management Integration
- **Stock Restoration**: Automatically restores product stock when invoices are deleted
- **Stock Validation**: Prevents overselling during invoice creation

---

## Invoice Management Frontend Integration Examples

### 1. Invoice List Component with Advanced Filtering
```javascript
const InvoiceList = () => {
  const [invoices, setInvoices] = useState([]);
  const [filters, setFilters] = useState({});
  const [stats, setStats] = useState(null);

  const loadInvoices = async () => {
    try {
      const data = await getInvoices(filters);
      setInvoices(data.data);
    } catch (error) {
      console.error('Error loading invoices:', error);
    }
  };

  const loadStatistics = async () => {
    try {
      const statistics = await getInvoiceStatistics();
      setStats(statistics);
    } catch (error) {
      console.error('Error loading statistics:', error);
    }
  };

  useEffect(() => {
    loadInvoices();
    loadStatistics();
  }, [filters]);

  const getStatusColor = (status) => {
    switch(status) {
      case 'paid': return 'text-green-600 bg-green-100';
      case 'pending': return 'text-yellow-600 bg-yellow-100';
      case 'overdue': return 'text-red-600 bg-red-100';
      case 'cancelled': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="invoice-list">
      {/* Statistics Dashboard */}
      {stats && (
        <div className="grid grid-cols-4 gap-4 mb-6">
          <div className="stat-card">
            <h3>Total Invoices</h3>
            <p className="text-3xl">{stats.total_invoices}</p>
          </div>
          <div className="stat-card">
            <h3>Paid Invoices</h3>
            <p className="text-3xl text-green-500">{stats.paid_invoices}</p>
          </div>
          <div className="stat-card">
            <h3>Pending Invoices</h3>
            <p className="text-3xl text-yellow-500">{stats.pending_invoices}</p>
          </div>
          <div className="stat-card">
            <h3>Total Revenue</h3>
            <p className="text-3xl">PKR {parseFloat(stats.total_amount).toLocaleString()}</p>
          </div>
        </div>
      )}

      {/* Filter Controls */}
      <div className="filters mb-4">
        <input
          type="text"
          placeholder="Search invoices..."
          value={filters.search || ''}
          onChange={(e) => setFilters({...filters, search: e.target.value})}
        />

        <select 
          value={filters.payment_status || ''} 
          onChange={(e) => setFilters({...filters, payment_status: e.target.value})}
        >
          <option value="">All Status</option>
          <option value="pending">Pending</option>
          <option value="paid">Paid</option>
          <option value="overdue">Overdue</option>
          <option value="cancelled">Cancelled</option>
        </select>

        <select 
          value={filters.payment_method || ''} 
          onChange={(e) => setFilters({...filters, payment_method: e.target.value})}
        >
          <option value="">All Payment Methods</option>
          <option value="cash">Cash</option>
          <option value="card">Card</option>
          <option value="bank_transfer">Bank Transfer</option>
          <option value="digital_wallet">Digital Wallet</option>
        </select>
      </div>

      {/* Invoice Table */}
      <div className="invoice-table">
        <table>
          <thead>
            <tr>
              <th>Invoice #</th>
              <th>Date</th>
              <th>Customer</th>
              <th>Total</th>
              <th>Payment</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {invoices.map(invoice => (
              <tr key={invoice.id}>
                <td>{invoice.invoice_number}</td>
                <td>{new Date(invoice.created_at).toLocaleDateString()}</td>
                <td>{invoice.customer ? invoice.customer.name : 'Guest'}</td>
                <td>PKR {parseFloat(invoice.total_amount).toLocaleString()}</td>
                <td>{invoice.payment_method_display}</td>
                <td>
                  <span className={`status-badge ${getStatusColor(invoice.payment_status)}`}>
                    {invoice.payment_status_display}
                  </span>
                </td>
                <td>
                  <button onClick={() => viewInvoice(invoice.id)}>View</button>
                  <button onClick={() => editInvoice(invoice.id)}>Edit</button>
                  <button onClick={() => deleteInvoice(invoice.id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
```

### 2. Invoice Search by Customer Component
```javascript
const InvoiceCustomerSearch = () => {
  const [customerName, setCustomerName] = useState('');
  const [customerInvoices, setCustomerInvoices] = useState([]);
  const [loading, setLoading] = useState(false);

  const searchCustomerInvoices = async () => {
    if (customerName.length < 2) return;
    
    setLoading(true);
    try {
      const data = await getInvoicesByCustomerName(customerName);
      setCustomerInvoices(data.invoices.data);
    } catch (error) {
      console.error('Error searching customer invoices:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    const timeoutId = setTimeout(searchCustomerInvoices, 500);
    return () => clearTimeout(timeoutId);
  }, [customerName]);

  return (
    <div className="customer-invoice-search">
      <input
        type="text"
        placeholder="Search by customer name..."
        value={customerName}
        onChange={(e) => setCustomerName(e.target.value)}
      />

      {loading && <div>Loading...</div>}

      {customerInvoices.length > 0 && (
        <div className="customer-invoices">
          <h3>Invoices for "{customerName}"</h3>
          {customerInvoices.map(invoice => (
            <div key={invoice.id} className="invoice-card">
              <h4>{invoice.invoice_number}</h4>
              <p>Date: {new Date(invoice.created_at).toLocaleDateString()}</p>
              <p>Total: PKR {parseFloat(invoice.total_amount).toLocaleString()}</p>
              <p>Status: {invoice.payment_status_display}</p>
              <p>Customer: {invoice.customer.name}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
```

### 3. Bulk Invoice Status Update Component
```javascript
const BulkInvoiceUpdate = () => {
  const [selectedInvoices, setSelectedInvoices] = useState([]);
  const [paymentStatus, setPaymentStatus] = useState('paid');
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [loading, setLoading] = useState(false);

  const handleBulkUpdate = async () => {
    if (selectedInvoices.length === 0) {
      alert('Please select at least one invoice');
      return;
    }

    setLoading(true);
    try {
      const result = await bulkUpdateInvoiceStatus(selectedInvoices, paymentStatus, paymentMethod);
      alert(`Successfully updated ${result.updated_count} invoices`);
      setSelectedInvoices([]);
    } catch (error) {
      console.error('Error updating invoices:', error);
      alert('Error updating invoices: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bulk-invoice-update">
      <h3>Bulk Update Invoices</h3>
      
      <div className="selected-count">
        Selected: {selectedInvoices.length} invoices
      </div>

      <div className="update-controls">
        <select 
          value={paymentStatus} 
          onChange={(e) => setPaymentStatus(e.target.value)}
        >
          <option value="pending">Pending</option>
          <option value="paid">Paid</option>
          <option value="overdue">Overdue</option>
          <option value="cancelled">Cancelled</option>
        </select>

        <select 
          value={paymentMethod} 
          onChange={(e) => setPaymentMethod(e.target.value)}
        >
          <option value="cash">Cash</option>
          <option value="card">Card</option>
          <option value="bank_transfer">Bank Transfer</option>
          <option value="digital_wallet">Digital Wallet</option>
        </select>

        <button 
          onClick={handleBulkUpdate}
          disabled={loading || selectedInvoices.length === 0}
        >
          {loading ? 'Updating...' : 'Update Selected'}
        </button>
      </div>
    </div>
  );
};
```

---

## Invoice Customer Linking Endpoints

### 49. Link Invoice to Customer
**PUT** `/invoices/{id}/link-customer`

Links an existing invoice to a customer. Useful for fixing invoices that were created without customer information.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "customer_id": 1
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Invoice linked to customer successfully",
  "data": {
    "id": 12,
    "invoice_number": "INV-20251018-0012",
    "customer_id": 1,
    "total_amount": "11500.00",
    "payment_status": "paid",
    "customer": {
      "id": 1,
      "name": "Alex Martinez",
      "email": "alex@example.com"
    },
    "customer_name_display": "Alex Martinez"
  }
}
```

#### Frontend Integration Example
```javascript
const linkInvoiceToCustomer = async (invoiceId, customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices/${invoiceId}/link-customer`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ customer_id: customerId })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 50. Get Guest Invoices (Invoices without Customers)
**GET** `/invoices-guest`

Retrieves all invoices that don't have a customer linked (showing as "Guest").

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `payment_status` (optional): Filter by payment status
- `date_from` (optional): Filter from date (YYYY-MM-DD)
- `date_to` (optional): Filter to date (YYYY-MM-DD)
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 12,
        "invoice_number": "INV-20251018-0012",
        "customer_id": null,
        "total_amount": "11500.00",
        "payment_status": "pending",
        "customer_name_display": "Guest",
        "transactions": [
          {
            "id": 25,
            "product_id": 1,
            "quantity": 2,
            "unit_price": "5500.00",
            "total_amount": "11000.00",
            "product": {
              "id": 1,
              "name": "BSN N.O.-XPLODE Pre-Workout"
            }
          }
        ]
      }
    ],
    "total": 8
  }
}
```

#### Frontend Integration Example
```javascript
const getGuestInvoices = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-guest?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 51. Bulk Link Invoices to Customer
**PUT** `/invoices-bulk-link-customer`

Links multiple invoices to a customer at once. Perfect for fixing multiple guest invoices.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "invoice_ids": [12, 13, 14, 15],
  "customer_id": 1
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Successfully linked 4 invoices to customer",
  "data": {
    "linked_count": 4,
    "customer_id": 1,
    "total_amount": "46000.00"
  }
}
```

#### Frontend Integration Example
```javascript
const bulkLinkInvoicesToCustomer = async (invoiceIds, customerId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-bulk-link-customer', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({
      invoice_ids: invoiceIds,
      customer_id: customerId
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Fixing Guest Invoice Issue - Complete Solution

### Problem Diagnosis
Your invoices are showing as "Guest" because they have `customer_id: null` in the database. This happens when:
1. Invoices are created without linking to a customer
2. Customer data is not properly passed during invoice creation
3. Frontend sends `null` or empty `customer_id`

### Solution Steps

#### Step 1: Check Current Situation
```javascript
// Get statistics to see how many guest invoices you have
const getStats = async () => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-statistics', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await response.json();
  console.log('Guest invoices:', data.data.statistics.guest_invoices);
  console.log('Customer invoices:', data.data.statistics.customer_invoices);
};
```

#### Step 2: Get Guest Invoices
```javascript
// Get all invoices that need to be linked to customers
const getGuestInvoices = async () => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-guest', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await response.json();
  return data.data.data; // Array of guest invoices
};
```

#### Step 3: Link Invoices to Customers
```javascript
// Link individual invoice
const linkInvoice = async (invoiceId, customerId) => {
  const response = await fetch(`https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices/${invoiceId}/link-customer`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ customer_id: customerId })
  });
  return response.json();
};

// Bulk link multiple invoices
const bulkLinkInvoices = async (invoiceIds, customerId) => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices-bulk-link-customer', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      invoice_ids: invoiceIds,
      customer_id: customerId
    })
  });
  return response.json();
};
```

#### Step 4: Frontend Invoice Management Component
```javascript
const InvoiceCustomerManager = () => {
  const [guestInvoices, setGuestInvoices] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [selectedInvoices, setSelectedInvoices] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState('');

  useEffect(() => {
    loadGuestInvoices();
    loadCustomers();
  }, []);

  const loadGuestInvoices = async () => {
    try {
      const data = await getGuestInvoices();
      setGuestInvoices(data);
    } catch (error) {
      console.error('Error loading guest invoices:', error);
    }
  };

  const loadCustomers = async () => {
    try {
      const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/customers', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      setCustomers(data.data.data);
    } catch (error) {
      console.error('Error loading customers:', error);
    }
  };

  const handleBulkLink = async () => {
    if (selectedInvoices.length === 0 || !selectedCustomer) {
      alert('Please select invoices and a customer');
      return;
    }

    try {
      const result = await bulkLinkInvoices(selectedInvoices, selectedCustomer);
      alert(`Successfully linked ${result.linked_count} invoices`);
      setSelectedInvoices([]);
      loadGuestInvoices(); // Refresh the list
    } catch (error) {
      console.error('Error linking invoices:', error);
      alert('Error linking invoices: ' + error.message);
    }
  };

  return (
    <div className="invoice-customer-manager">
      <h3>Link Guest Invoices to Customers</h3>
      
      <div className="customer-selector">
        <select value={selectedCustomer} onChange={(e) => setSelectedCustomer(e.target.value)}>
          <option value="">Select Customer</option>
          {customers.map(customer => (
            <option key={customer.id} value={customer.id}>
              {customer.name} ({customer.email})
            </option>
          ))}
        </select>
      </div>

      <div className="guest-invoices">
        <h4>Guest Invoices ({guestInvoices.length})</h4>
        {guestInvoices.map(invoice => (
          <div key={invoice.id} className="invoice-item">
            <input
              type="checkbox"
              checked={selectedInvoices.includes(invoice.id)}
              onChange={(e) => {
                if (e.target.checked) {
                  setSelectedInvoices([...selectedInvoices, invoice.id]);
                } else {
                  setSelectedInvoices(selectedInvoices.filter(id => id !== invoice.id));
                }
              }}
            />
            <span>{invoice.invoice_number}</span>
            <span>PKR {parseFloat(invoice.total_amount).toLocaleString()}</span>
            <span>{invoice.payment_status_display}</span>
            <span>{new Date(invoice.created_at).toLocaleDateString()}</span>
          </div>
        ))}
      </div>

      <button 
        onClick={handleBulkLink}
        disabled={selectedInvoices.length === 0 || !selectedCustomer}
      >
        Link Selected Invoices to Customer
      </button>
    </div>
  );
};
```

### Prevention for Future Invoices

#### 1. Always Include Customer ID in POS
```javascript
// When creating invoices from POS, always include customer_id
const createInvoice = async (invoiceData) => {
  const response = await fetch('https://transformation-gym-backend-main-6gfz8p.laravel.cloud/api/invoices', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      customer_id: invoiceData.customerId || null, // Don't omit this field
      transactions: invoiceData.transactions,
      payment_method: invoiceData.paymentMethod,
      // ... other fields
    })
  });
  return response.json();
};
```

#### 2. Validate Customer Selection in Frontend
```javascript
const validateInvoiceData = (invoiceData) => {
  if (!invoiceData.customerId && invoiceData.customerType !== 'guest') {
    throw new Error('Please select a customer or mark as guest');
  }
  return true;
};
```

---

## Invoice Management Integration Checklist

✅ **CRUD Operations**
- [x] Create invoices (via POS system)
- [x] Read/View invoice details
- [x] Update invoice information
- [x] Delete invoices with stock restoration

✅ **Advanced Search & Filtering**
- [x] Search by invoice number
- [x] Search by customer name, email, mobile
- [x] Filter by payment status
- [x] Filter by payment method
- [x] Date range filtering
- [x] Customer name filtering

✅ **Bulk Operations**
- [x] Bulk status updates
- [x] Bulk payment method updates
- [x] Multi-invoice selection

✅ **Statistics & Reporting**
- [x] Invoice statistics dashboard
- [x] Payment status summaries
- [x] Revenue tracking
- [x] Daily/monthly sales reports

✅ **Integration Features**
- [x] Customer statistics updates
- [x] Product stock management
- [x] Automatic calculations
- [x] Transaction history linking

---

## Staff Management Endpoints

Complete staff management system for POS users with full CRUD operations, role management, and status control.

### 52. Get All Staff Members
**GET** `/staff`

Retrieves a paginated list of staff members with advanced filtering and search capabilities.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `search` (optional): Search by name, email, or phone number
- `role` (optional): Filter by role (`admin`, `staff`)
- `status` (optional): Filter by status (`active`, `inactive`)
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "current_page": 1,
    "data": [
      {
        "id": 1,
        "name": "Alice Johnson",
        "email": "alice@example.com",
        "role": "admin",
        "role_display": "Admin",
        "phone": "+1 555 1010",
        "status": "active",
        "status_display": "Active",
        "is_active": true,
        "created_at": "2025-10-18T10:30:00.000000Z",
        "updated_at": "2025-10-18T10:30:00.000000Z"
      },
      {
        "id": 2,
        "name": "Bob Lee",
        "email": "bob@example.com",
        "role": "staff",
        "role_display": "Staff",
        "phone": "+1 555 2020",
        "status": "active",
        "status_display": "Active",
        "is_active": true,
        "created_at": "2025-10-18T11:00:00.000000Z",
        "updated_at": "2025-10-18T11:00:00.000000Z"
      }
    ],
    "total": 2
  }
}
```

#### Frontend Integration Example
```javascript
const getStaff = async (filters = {}) => {
  const token = localStorage.getItem('auth_token');
  const queryParams = new URLSearchParams(filters);
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage examples:
// getStaff({ search: 'alice', role: 'admin', status: 'active' })
// getStaff({ status: 'inactive' })
```

---

### 53. Create New Staff Member
**POST** `/staff`

Creates a new staff member account for POS system access.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "name": "Chris Green",
  "email": "chris@example.com",
  "password": "password123",
  "password_confirmation": "password123",
  "role": "staff",
  "phone": "+1 555 3030",
  "status": "active"
}
```

#### Field Requirements
- `name` - Required string (max 255 characters)
- `email` - Required valid email (unique)
- `password` - Required string (minimum 8 characters)
- `password_confirmation` - Required (must match password)
- `role` - Required (`admin` or `staff`)
- `phone` - Optional string (max 20 characters)
- `status` - Optional (`active` or `inactive`, defaults to `active`)

#### Response (201 Created)
```json
{
  "success": true,
  "message": "Staff member created successfully",
  "data": {
    "id": 3,
    "name": "Chris Green",
    "email": "chris@example.com",
    "role": "staff",
    "role_display": "Staff",
    "phone": "+1 555 3030",
    "status": "active",
    "status_display": "Active",
    "is_active": true,
    "created_at": "2025-10-18T12:00:00.000000Z",
    "updated_at": "2025-10-18T12:00:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const createStaff = async (staffData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/staff', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(staffData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};

// Usage:
// createStaff({
//   name: 'John Doe',
//   email: 'john@example.com',
//   password: 'password123',
//   password_confirmation: 'password123',
//   role: 'staff',
//   phone: '+1 555 1234'
// });
```

---

### 54. View Staff Member Details
**GET** `/staff/{id}`

Retrieves detailed information about a specific staff member.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "id": 1,
    "name": "Alice Johnson",
    "email": "alice@example.com",
    "role": "admin",
    "role_display": "Admin",
    "phone": "+1 555 1010",
    "status": "active",
    "status_display": "Active",
    "is_active": true,
    "created_at": "2025-10-18T10:30:00.000000Z",
    "updated_at": "2025-10-18T10:30:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const getStaffMember = async (staffId) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 55. Update Staff Member
**PUT** `/staff/{id}`

Updates staff member information. All fields are optional for partial updates.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body (all fields optional)
```json
{
  "name": "Alice Smith",
  "email": "alice.smith@example.com",
  "role": "admin",
  "phone": "+1 555 1011",
  "status": "active"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Staff member updated successfully",
  "data": {
    "id": 1,
    "name": "Alice Smith",
    "email": "alice.smith@example.com",
    "role": "admin",
    "role_display": "Admin",
    "phone": "+1 555 1011",
    "status": "active",
    "status_display": "Active",
    "is_active": true,
    "updated_at": "2025-10-18T13:00:00.000000Z"
  }
}
```

#### Frontend Integration Example
```javascript
const updateStaff = async (staffId, updateData) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(updateData)
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 56. Delete Staff Member
**DELETE** `/staff/{id}`

Removes a staff member from the system. Cannot delete the last admin user.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Staff member deleted successfully"
}
```

#### Important Notes
- **Cannot delete last admin**: System prevents deletion of the last admin user
- **Permanent deletion**: This action cannot be undone
- **Access revocation**: Deleted staff will lose all POS system access

#### Frontend Integration Example
```javascript
const deleteStaff = async (staffId) => {
  const token = localStorage.getItem('auth_token');
  
  const confirmed = confirm('Are you sure you want to delete this staff member? This action cannot be undone.');
  if (!confirmed) return;
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}`, {
    method: 'DELETE',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 57. Update Staff Status
**PUT** `/staff/{id}/status`

Updates the active/inactive status of a staff member.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "status": "inactive"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Staff status updated successfully",
  "data": {
    "id": 1,
    "name": "Alice Johnson",
    "status": "inactive",
    "status_display": "Inactive"
  }
}
```

#### Frontend Integration Example
```javascript
const updateStaffStatus = async (staffId, status) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}/status`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ status })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 58. Update Staff Role
**PUT** `/staff/{id}/role`

Changes the role of a staff member (admin/staff). Cannot change the last admin to staff.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "role": "admin"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Staff role updated successfully",
  "data": {
    "id": 1,
    "name": "Alice Johnson",
    "role": "admin",
    "role_display": "Admin"
  }
}
```

#### Important Notes
- **Cannot demote last admin**: System prevents changing the last admin to staff role
- **Access level**: Both admin and staff currently have same POS access level

#### Frontend Integration Example
```javascript
const updateStaffRole = async (staffId, role) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}/role`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({ role })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 59. Change Staff Password
**PUT** `/staff/{id}/change-password`

Updates the password for a staff member.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "password": "newpassword123",
  "password_confirmation": "newpassword123"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Password changed successfully"
}
```

#### Frontend Integration Example
```javascript
const changeStaffPassword = async (staffId, password, passwordConfirmation) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff/${staffId}/change-password`, {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({
      password,
      password_confirmation: passwordConfirmation
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.message;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 60. Bulk Update Staff Status
**PUT** `/staff-bulk-update-status`

Updates the status of multiple staff members at once.

#### Headers Required
```
Authorization: Bearer {token}
Content-Type: application/json
```

#### Request Body
```json
{
  "staff_ids": [1, 2, 3, 4],
  "status": "inactive"
}
```

#### Response (200 OK)
```json
{
  "success": true,
  "message": "Successfully updated 4 staff members",
  "data": {
    "updated_count": 4,
    "staff_ids": [1, 2, 3, 4],
    "status": "inactive"
  }
}
```

#### Frontend Integration Example
```javascript
const bulkUpdateStaffStatus = async (staffIds, status) => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/staff-bulk-update-status', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify({
      staff_ids: staffIds,
      status: status
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 61. Get Staff by Role
**GET** `/staff-by-role`

Retrieves staff members filtered by their role.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Query Parameters
- `role` (required): Staff role (`admin` or `staff`)
- `status` (optional): Filter by status (`active`, `inactive`)
- `search` (optional): Search by name, email, or phone
- `sort_by` (optional): Sort field (default: `created_at`)
- `sort_order` (optional): Sort direction (`asc`, `desc` - default: `desc`)
- `per_page` (optional): Items per page (default: `15`)

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "role": "admin",
    "staff": {
      "current_page": 1,
      "data": [
        {
          "id": 1,
          "name": "Alice Johnson",
          "email": "alice@example.com",
          "role": "admin",
          "role_display": "Admin",
          "phone": "+1 555 1010",
          "status": "active",
          "status_display": "Active",
          "is_active": true
        }
      ],
      "total": 1
    }
  }
}
```

#### Frontend Integration Example
```javascript
const getStaffByRole = async (role, filters = {}) => {
  const token = localStorage.getItem('auth_token');
  
  const queryParams = new URLSearchParams({
    role: role,
    ...filters
  });
  
  const response = await fetch(`http://127.0.0.1:8000/api/staff-by-role?${queryParams}`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data;
  } else {
    throw new Error(data.message);
  }
};
```

---

### 62. Get Staff Statistics
**GET** `/staff-statistics`

Retrieves comprehensive statistics about staff members.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response (200 OK)
```json
{
  "success": true,
  "data": {
    "statistics": {
      "total_staff": 5,
      "active_staff": 4,
      "inactive_staff": 1,
      "admin_count": 2,
      "staff_count": 3,
      "recent_staff": 2
    }
  }
}
```

#### Statistics Breakdown
- `total_staff` - Total number of staff members
- `active_staff` - Number of active staff members
- `inactive_staff` - Number of inactive staff members
- `admin_count` - Number of admin users
- `staff_count` - Number of staff users
- `recent_staff` - Number of staff added in the last 30 days

#### Frontend Integration Example
```javascript
const getStaffStatistics = async () => {
  const token = localStorage.getItem('auth_token');
  
  const response = await fetch('http://127.0.0.1:8000/api/staff-statistics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/json'
    }
  });
  
  const data = await response.json();
  
  if (data.success) {
    return data.data.statistics;
  } else {
    throw new Error(data.message);
  }
};
```

---

## Staff Management Features

### Advanced Search and Filtering
- **Search by Name**: Find staff by partial name match
- **Search by Email**: Find staff by email address
- **Search by Phone**: Find staff by phone number
- **Filter by Role**: admin, staff
- **Filter by Status**: active, inactive
- **Combined Filters**: Use multiple filters simultaneously

### CRUD Operations
- **Create**: Add new staff members with validation
- **Read**: View staff details and lists
- **Update**: Modify staff information
- **Delete**: Remove staff members (with safety checks)

### Role Management
- **Admin Role**: Full system access
- **Staff Role**: POS system access
- **Role Updates**: Change roles with safety validations
- **Last Admin Protection**: Cannot delete or demote last admin

### Status Management
- **Active Status**: Staff can access POS system
- **Inactive Status**: Staff cannot access POS system
- **Bulk Status Updates**: Update multiple staff status at once
- **Status History**: Track status changes

### Security Features
- **Password Management**: Secure password changes
- **Access Control**: Role-based permissions
- **Safety Validations**: Prevent system lockouts
- **Audit Trail**: Track all staff changes

---

## Staff Management Frontend Integration Examples

### 1. Staff List Component
```javascript
const StaffList = () => {
  const [staff, setStaff] = useState([]);
  const [filters, setFilters] = useState({});
  const [stats, setStats] = useState(null);

  const loadStaff = async () => {
    try {
      const data = await getStaff(filters);
      setStaff(data.data);
    } catch (error) {
      console.error('Error loading staff:', error);
    }
  };

  const loadStatistics = async () => {
    try {
      const statistics = await getStaffStatistics();
      setStats(statistics);
    } catch (error) {
      console.error('Error loading statistics:', error);
    }
  };

  useEffect(() => {
    loadStaff();
    loadStatistics();
  }, [filters]);

  const getRoleColor = (role) => {
    switch(role) {
      case 'admin': return 'text-purple-600 bg-purple-100';
      case 'staff': return 'text-blue-600 bg-blue-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusColor = (status) => {
    switch(status) {
      case 'active': return 'text-green-600 bg-green-100';
      case 'inactive': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <div className="staff-list">
      {/* Statistics Dashboard */}
      {stats && (
        <div className="grid grid-cols-4 gap-4 mb-6">
          <div className="stat-card">
            <h3>Total Staff</h3>
            <p className="text-3xl">{stats.total_staff}</p>
          </div>
          <div className="stat-card">
            <h3>Active Staff</h3>
            <p className="text-3xl text-green-500">{stats.active_staff}</p>
          </div>
          <div className="stat-card">
            <h3>Admins</h3>
            <p className="text-3xl text-purple-500">{stats.admin_count}</p>
          </div>
          <div className="stat-card">
            <h3>Staff</h3>
            <p className="text-3xl text-blue-500">{stats.staff_count}</p>
          </div>
        </div>
      )}

      {/* Filter Controls */}
      <div className="filters mb-4">
        <input
          type="text"
          placeholder="Search staff..."
          value={filters.search || ''}
          onChange={(e) => setFilters({...filters, search: e.target.value})}
        />

        <select 
          value={filters.role || ''} 
          onChange={(e) => setFilters({...filters, role: e.target.value})}
        >
          <option value="">All Roles</option>
          <option value="admin">Admin</option>
          <option value="staff">Staff</option>
        </select>

        <select 
          value={filters.status || ''} 
          onChange={(e) => setFilters({...filters, status: e.target.value})}
        >
          <option value="">All Status</option>
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      {/* Staff Table */}
      <div className="staff-table">
        <table>
          <thead>
            <tr>
              <th>User</th>
              <th>Phone</th>
              <th>Role</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {staff.map(member => (
              <tr key={member.id}>
                <td>
                  <div>
                    <div className="font-semibold">{member.name}</div>
                    <div className="text-sm text-gray-500">{member.email}</div>
                  </div>
                </td>
                <td>{member.phone || 'N/A'}</td>
                <td>
                  <span className={`role-badge ${getRoleColor(member.role)}`}>
                    {member.role_display}
                  </span>
                </td>
                <td>
                  <span className={`status-badge ${getStatusColor(member.status)}`}>
                    {member.status_display}
                  </span>
                </td>
                <td>
                  <button onClick={() => viewStaff(member.id)}>View</button>
                  <button onClick={() => editStaff(member.id)}>Edit</button>
                  <button onClick={() => deleteStaff(member.id)}>Delete</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
```

### 2. Staff Form Component
```javascript
const StaffForm = ({ staffId, onSave }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
    role: 'staff',
    phone: '',
    status: 'active'
  });

  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (staffId) {
      loadStaffMember();
    }
  }, [staffId]);

  const loadStaffMember = async () => {
    try {
      const staff = await getStaffMember(staffId);
      setFormData({
        name: staff.name,
        email: staff.email,
        password: '',
        password_confirmation: '',
        role: staff.role,
        phone: staff.phone || '',
        status: staff.status
      });
    } catch (error) {
      console.error('Error loading staff member:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (staffId) {
        await updateStaff(staffId, formData);
      } else {
        await createStaff(formData);
      }
      onSave();
    } catch (error) {
      console.error('Error saving staff:', error);
      alert('Error saving staff: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="staff-form">
      <div className="form-group">
        <label>Name</label>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => setFormData({...formData, name: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <label>Email</label>
        <input
          type="email"
          value={formData.email}
          onChange={(e) => setFormData({...formData, email: e.target.value})}
          required
        />
      </div>

      <div className="form-group">
        <label>Password</label>
        <input
          type="password"
          value={formData.password}
          onChange={(e) => setFormData({...formData, password: e.target.value})}
          required={!staffId}
        />
      </div>

      <div className="form-group">
        <label>Confirm Password</label>
        <input
          type="password"
          value={formData.password_confirmation}
          onChange={(e) => setFormData({...formData, password_confirmation: e.target.value})}
          required={!staffId}
        />
      </div>

      <div className="form-group">
        <label>Role</label>
        <select
          value={formData.role}
          onChange={(e) => setFormData({...formData, role: e.target.value})}
        >
          <option value="staff">Staff</option>
          <option value="admin">Admin</option>
        </select>
      </div>

      <div className="form-group">
        <label>Phone</label>
        <input
          type="text"
          value={formData.phone}
          onChange={(e) => setFormData({...formData, phone: e.target.value})}
        />
      </div>

      <div className="form-group">
        <label>Status</label>
        <select
          value={formData.status}
          onChange={(e) => setFormData({...formData, status: e.target.value})}
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>

      <button type="submit" disabled={loading}>
        {loading ? 'Saving...' : (staffId ? 'Update Staff' : 'Create Staff')}
      </button>
    </form>
  );
};
```

### 3. Bulk Actions Component
```javascript
const BulkStaffActions = ({ selectedStaff, onUpdate }) => {
  const [status, setStatus] = useState('active');
  const [loading, setLoading] = useState(false);

  const handleBulkStatusUpdate = async () => {
    if (selectedStaff.length === 0) {
      alert('Please select staff members');
      return;
    }

    setLoading(true);
    try {
      const result = await bulkUpdateStaffStatus(selectedStaff, status);
      alert(`Successfully updated ${result.updated_count} staff members`);
      onUpdate();
    } catch (error) {
      console.error('Error updating staff status:', error);
      alert('Error updating staff status: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bulk-actions">
      <h3>Bulk Actions</h3>
      
      <div className="selected-count">
        Selected: {selectedStaff.length} staff members
      </div>

      <div className="bulk-controls">
        <select 
          value={status} 
          onChange={(e) => setStatus(e.target.value)}
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>

        <button 
          onClick={handleBulkStatusUpdate}
          disabled={loading || selectedStaff.length === 0}
        >
          {loading ? 'Updating...' : 'Update Status'}
        </button>
      </div>
    </div>
  );
};
```

---

## Staff Management Integration Checklist

✅ **CRUD Operations**
- [x] Create staff members
- [x] Read/View staff details and lists
- [x] Update staff information
- [x] Delete staff members (with safety checks)

✅ **Advanced Search & Filtering**
- [x] Search by name, email, phone
- [x] Filter by role (admin, staff)
- [x] Filter by status (active, inactive)
- [x] Combined filtering options

✅ **Role Management**
- [x] Admin and staff roles
- [x] Role updates with validation
- [x] Last admin protection
- [x] Role-based access control

✅ **Status Management**
- [x] Active/inactive status
- [x] Bulk status updates
- [x] Status change tracking
- [x] Access control based on status

✅ **Security Features**
- [x] Password management
- [x] Secure authentication
- [x] Access validation
- [x] Safety checks for system integrity

✅ **Statistics & Reporting**
- [x] Staff count statistics
- [x] Role distribution
- [x] Status summaries
- [x] Recent activity tracking

---

## Thermal Printer Integration

### Thermal Printer Invoice Format

The invoice system is optimized for thermal printers (80mm width) commonly used in POS systems. The invoice template includes:

#### Features:
- **80mm width** - Standard thermal printer width
- **Compact layout** - Optimized for small receipts
- **Monospace font** - Courier New for consistent alignment
- **Essential information only** - Company details, customer info, items, totals
- **Print-friendly** - Minimal margins and compact spacing

#### Invoice Template Includes:
- Company header with name, address, phone, email
- Invoice number, date, and time
- Customer information (name, email, phone)
- Itemized list with description, quantity, price, total
- Subtotal, tax, discount, and final total
- Payment status and method
- Notes section
- Thank you message
- Generation timestamp

### Thermal Printer API Endpoints

#### Print Invoice to Thermal Printer
**GET** `/invoices/{id}/print`

Opens the invoice in a new window optimized for thermal printing.

#### Headers Required
```
Authorization: Bearer {token}
```

#### Response
- Opens PDF in browser for direct printing
- Optimized for 80mm thermal printers
- Can be sent directly to thermal printer

#### Frontend Integration Example
```javascript
const printInvoice = async (invoiceId) => {
  try {
    const response = await fetch(`/api/invoices/${invoiceId}/print`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      // Open in new window for printing
      const printWindow = window.open('', '_blank');
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      printWindow.location.href = url;
    }
  } catch (error) {
    console.error('Error printing invoice:', error);
  }
};
```

#### Thermal Printer Setup Tips

1. **Printer Configuration:**
   - Set paper width to 80mm
   - Use thermal paper (no ink required)
   - Configure for receipt printing

2. **Browser Settings:**
   - Disable headers and footers
   - Set margins to minimum (0.1 inch)
   - Use "Print to PDF" then send to printer

3. **POS Integration:**
   - Use `window.print()` after loading the invoice
   - Configure browser to auto-print
   - Set up print queue for multiple invoices

---

This documentation provides everything your React frontend team needs to integrate with authentication, customer management, image upload, plan management, customer plan relationships, comprehensive fee tracking with automatic invoice generation, and thermal printer integration for POS systems. The system includes proper fee status tracking, payment history, automatic invoice generation, and thermal printer-optimized receipts.
